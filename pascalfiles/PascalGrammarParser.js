// Generated from PascalGrammar.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('./antlr4/index');
var PascalGrammarListener = require('./PascalGrammarListener').PascalGrammarListener;
var grammarFileName = "PascalGrammar.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003T\u0343\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004",
    "]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004c\tc\u0003",
    "\u0002\u0003\u0002\u0005\u0002\u00c9\n\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0005\u0003\u00d4\n\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u00dc\n\u0003",
    "\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u00e7\n\u0005\f\u0005",
    "\u000e\u0005\u00ea\u000b\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0007\u0007\u00f6\n\u0007\f\u0007\u000e\u0007\u00f9\u000b\u0007",
    "\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0006\t\u0103\n\t\r\t\u000e\t\u0104\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0005\f\u011b\n\f\u0003\r\u0003\r\u0005\r\u011f\n\r\u0003",
    "\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003",
    "\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0006\u0013\u012f\n\u0013\r\u0013\u000e\u0013\u0130",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014",
    "\u0138\n\u0014\u0003\u0015\u0003\u0015\u0005\u0015\u013c\n\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0005\u0016\u0143",
    "\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0148\n\u0017",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u014e\n",
    "\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0005\u001b\u015a",
    "\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u015f\n\u001c",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u0165\n",
    "\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u016b",
    "\n\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f",
    "\u017d\n\u001f\u0003 \u0003 \u0003 \u0007 \u0182\n \f \u000e \u0185",
    "\u000b \u0003!\u0003!\u0003\"\u0003\"\u0003#\u0003#\u0005#\u018d\n#",
    "\u0003#\u0003#\u0003$\u0003$\u0003$\u0005$\u0194\n$\u0003$\u0005$\u0197",
    "\n$\u0003%\u0003%\u0003%\u0007%\u019c\n%\f%\u000e%\u019f\u000b%\u0003",
    "&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0007\'\u01ab\n\'\f\'\u000e\'\u01ae\u000b\'\u0003(\u0003(\u0003(",
    "\u0003(\u0003(\u0005(\u01b5\n(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003*\u0003*\u0003*\u0003*\u0003+\u0003+\u0003,\u0003,\u0003,\u0003",
    ",\u0005,\u01c7\n,\u0003-\u0003-\u0003-\u0003.\u0003.\u0003.\u0003.\u0007",
    ".\u01d0\n.\f.\u000e.\u01d3\u000b.\u0003.\u0003.\u0003/\u0003/\u0003",
    "/\u0003/\u00030\u00030\u00030\u00031\u00031\u00051\u01e0\n1\u00032\u0003",
    "2\u00032\u00052\u01e5\n2\u00032\u00032\u00032\u00033\u00033\u00033\u0003",
    "3\u00073\u01ee\n3\f3\u000e3\u01f1\u000b3\u00053\u01f3\n3\u00033\u0003",
    "3\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00054\u01fe\n4\u0003",
    "5\u00035\u00035\u00035\u00036\u00036\u00036\u00076\u0207\n6\f6\u000e",
    "6\u020a\u000b6\u00037\u00037\u00037\u00077\u020f\n7\f7\u000e7\u0212",
    "\u000b7\u00038\u00038\u00038\u00058\u0217\n8\u00038\u00038\u00038\u0003",
    "8\u00038\u00039\u00039\u0003:\u0003:\u0003:\u0003:\u0003:\u0005:\u0225",
    "\n:\u0003;\u0003;\u0005;\u0229\n;\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0005<\u0230\n<\u0003=\u0003=\u0003=\u0005=\u0235\n=\u0003=\u0003",
    "=\u0005=\u0239\n=\u0003=\u0003=\u0003=\u0003=\u0007=\u023f\n=\f=\u000e",
    "=\u0242\u000b=\u0003=\u0003=\u0003=\u0003=\u0005=\u0248\n=\u0003=\u0005",
    "=\u024b\n=\u0003>\u0003>\u0003>\u0003>\u0003?\u0003?\u0003?\u0005?\u0254",
    "\n?\u0003?\u0003?\u0003?\u0003?\u0007?\u025a\n?\f?\u000e?\u025d\u000b",
    "?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0007?\u0265\n?\f?\u000e",
    "?\u0268\u000b?\u0003?\u0003?\u0003?\u0003?\u0003?\u0007?\u026f\n?\f",
    "?\u000e?\u0272\u000b?\u0003@\u0003@\u0003@\u0003@\u0005@\u0278\n@\u0003",
    "A\u0003A\u0003B\u0003B\u0003B\u0003B\u0005B\u0280\nB\u0003C\u0003C\u0003",
    "D\u0003D\u0003D\u0003D\u0005D\u0288\nD\u0003E\u0003E\u0003F\u0005F\u028d",
    "\nF\u0003F\u0003F\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0003G\u0003G\u0003G\u0005G\u029c\nG\u0003H\u0003H\u0003H\u0003H\u0005",
    "H\u02a2\nH\u0003I\u0003I\u0003I\u0003I\u0003I\u0003J\u0003J\u0003J\u0007",
    "J\u02ac\nJ\fJ\u000eJ\u02af\u000bJ\u0003K\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0003K\u0003K\u0005K\u02b9\nK\u0003L\u0003L\u0003L\u0007L\u02be",
    "\nL\fL\u000eL\u02c1\u000bL\u0003L\u0005L\u02c4\nL\u0003M\u0003M\u0003",
    "M\u0005M\u02c9\nM\u0003N\u0003N\u0003N\u0005N\u02ce\nN\u0003N\u0005",
    "N\u02d1\nN\u0003O\u0003O\u0007O\u02d5\nO\fO\u000eO\u02d8\u000bO\u0003",
    "P\u0003P\u0003P\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003S\u0003S\u0003",
    "T\u0003T\u0003T\u0003T\u0005T\u02e8\nT\u0003U\u0003U\u0003U\u0003U\u0003",
    "V\u0003V\u0003V\u0007V\u02f1\nV\fV\u000eV\u02f4\u000bV\u0003W\u0003",
    "W\u0005W\u02f8\nW\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0005X\u0300",
    "\nX\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0007Y\u0308\nY\fY\u000e",
    "Y\u030b\u000bY\u0003Y\u0003Y\u0003Y\u0005Y\u0310\nY\u0003Y\u0003Y\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003[\u0003[\u0003[\u0005[\u031b\n[\u0003\\",
    "\u0003\\\u0003\\\u0003\\\u0003\\\u0003]\u0003]\u0003]\u0003]\u0003]",
    "\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003_\u0003_\u0003",
    "_\u0003_\u0003`\u0003`\u0003a\u0003a\u0003b\u0003b\u0003b\u0003b\u0003",
    "b\u0003c\u0003c\u0003c\u0007c\u033e\nc\fc\u000ec\u0341\u000bc\u0003",
    "c\u0002\u0002d\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016",
    "\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnp",
    "rtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092",
    "\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa",
    "\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2",
    "\u00c4\u0002\n\u0003\u0002+,\u0003\u0002JK\u0007\u0002\u0006\u0006\b",
    "\b\u0016\u0016  HH\u0004\u0002++00\u0004\u0002\u0015\u001538\u0004\u0002",
    "\u001c\u001c+,\u0006\u0002\u0003\u0003\u000b\u000b\u0018\u0018-.\u0004",
    "\u0002\r\r%%\u0002\u034d\u0002\u00c6\u0003\u0002\u0002\u0002\u0004\u00db",
    "\u0003\u0002\u0002\u0002\u0006\u00dd\u0003\u0002\u0002\u0002\b\u00e8",
    "\u0003\u0002\u0002\u0002\n\u00ed\u0003\u0002\u0002\u0002\f\u00f1\u0003",
    "\u0002\u0002\u0002\u000e\u00fc\u0003\u0002\u0002\u0002\u0010\u00fe\u0003",
    "\u0002\u0002\u0002\u0012\u0106\u0003\u0002\u0002\u0002\u0014\u010a\u0003",
    "\u0002\u0002\u0002\u0016\u011a\u0003\u0002\u0002\u0002\u0018\u011e\u0003",
    "\u0002\u0002\u0002\u001a\u0120\u0003\u0002\u0002\u0002\u001c\u0122\u0003",
    "\u0002\u0002\u0002\u001e\u0124\u0003\u0002\u0002\u0002 \u0126\u0003",
    "\u0002\u0002\u0002\"\u0128\u0003\u0002\u0002\u0002$\u012a\u0003\u0002",
    "\u0002\u0002&\u0132\u0003\u0002\u0002\u0002(\u0139\u0003\u0002\u0002",
    "\u0002*\u0140\u0003\u0002\u0002\u0002,\u0147\u0003\u0002\u0002\u0002",
    ".\u014d\u0003\u0002\u0002\u00020\u014f\u0003\u0002\u0002\u00022\u0153",
    "\u0003\u0002\u0002\u00024\u0159\u0003\u0002\u0002\u00026\u015e\u0003",
    "\u0002\u0002\u00028\u0164\u0003\u0002\u0002\u0002:\u0166\u0003\u0002",
    "\u0002\u0002<\u017c\u0003\u0002\u0002\u0002>\u017e\u0003\u0002\u0002",
    "\u0002@\u0186\u0003\u0002\u0002\u0002B\u0188\u0003\u0002\u0002\u0002",
    "D\u018a\u0003\u0002\u0002\u0002F\u0196\u0003\u0002\u0002\u0002H\u0198",
    "\u0003\u0002\u0002\u0002J\u01a0\u0003\u0002\u0002\u0002L\u01a4\u0003",
    "\u0002\u0002\u0002N\u01b4\u0003\u0002\u0002\u0002P\u01b6\u0003\u0002",
    "\u0002\u0002R\u01bc\u0003\u0002\u0002\u0002T\u01c0\u0003\u0002\u0002",
    "\u0002V\u01c6\u0003\u0002\u0002\u0002X\u01c8\u0003\u0002\u0002\u0002",
    "Z\u01cb\u0003\u0002\u0002\u0002\\\u01d6\u0003\u0002\u0002\u0002^\u01da",
    "\u0003\u0002\u0002\u0002`\u01df\u0003\u0002\u0002\u0002b\u01e1\u0003",
    "\u0002\u0002\u0002d\u01e9\u0003\u0002\u0002\u0002f\u01fd\u0003\u0002",
    "\u0002\u0002h\u01ff\u0003\u0002\u0002\u0002j\u0203\u0003\u0002\u0002",
    "\u0002l\u020b\u0003\u0002\u0002\u0002n\u0213\u0003\u0002\u0002\u0002",
    "p\u021d\u0003\u0002\u0002\u0002r\u0224\u0003\u0002\u0002\u0002t\u0228",
    "\u0003\u0002\u0002\u0002v\u022f\u0003\u0002\u0002\u0002x\u024a\u0003",
    "\u0002\u0002\u0002z\u024c\u0003\u0002\u0002\u0002|\u0253\u0003\u0002",
    "\u0002\u0002~\u0273\u0003\u0002\u0002\u0002\u0080\u0279\u0003\u0002",
    "\u0002\u0002\u0082\u027b\u0003\u0002\u0002\u0002\u0084\u0281\u0003\u0002",
    "\u0002\u0002\u0086\u0283\u0003\u0002\u0002\u0002\u0088\u0289\u0003\u0002",
    "\u0002\u0002\u008a\u028c\u0003\u0002\u0002\u0002\u008c\u029b\u0003\u0002",
    "\u0002\u0002\u008e\u02a1\u0003\u0002\u0002\u0002\u0090\u02a3\u0003\u0002",
    "\u0002\u0002\u0092\u02a8\u0003\u0002\u0002\u0002\u0094\u02b8\u0003\u0002",
    "\u0002\u0002\u0096\u02c3\u0003\u0002\u0002\u0002\u0098\u02c5\u0003\u0002",
    "\u0002\u0002\u009a\u02ca\u0003\u0002\u0002\u0002\u009c\u02d2\u0003\u0002",
    "\u0002\u0002\u009e\u02d9\u0003\u0002\u0002\u0002\u00a0\u02dc\u0003\u0002",
    "\u0002\u0002\u00a2\u02df\u0003\u0002\u0002\u0002\u00a4\u02e1\u0003\u0002",
    "\u0002\u0002\u00a6\u02e7\u0003\u0002\u0002\u0002\u00a8\u02e9\u0003\u0002",
    "\u0002\u0002\u00aa\u02ed\u0003\u0002\u0002\u0002\u00ac\u02f7\u0003\u0002",
    "\u0002\u0002\u00ae\u02f9\u0003\u0002\u0002\u0002\u00b0\u0301\u0003\u0002",
    "\u0002\u0002\u00b2\u0313\u0003\u0002\u0002\u0002\u00b4\u031a\u0003\u0002",
    "\u0002\u0002\u00b6\u031c\u0003\u0002\u0002\u0002\u00b8\u0321\u0003\u0002",
    "\u0002\u0002\u00ba\u0326\u0003\u0002\u0002\u0002\u00bc\u032d\u0003\u0002",
    "\u0002\u0002\u00be\u0331\u0003\u0002\u0002\u0002\u00c0\u0333\u0003\u0002",
    "\u0002\u0002\u00c2\u0335\u0003\u0002\u0002\u0002\u00c4\u033a\u0003\u0002",
    "\u0002\u0002\u00c6\u00c8\u0005\u0004\u0003\u0002\u00c7\u00c9\u0007F",
    "\u0002\u0002\u00c8\u00c7\u0003\u0002\u0002\u0002\u00c8\u00c9\u0003\u0002",
    "\u0002\u0002\u00c9\u00ca\u0003\u0002\u0002\u0002\u00ca\u00cb\u0005\b",
    "\u0005\u0002\u00cb\u00cc\u0007A\u0002\u0002\u00cc\u0003\u0003\u0002",
    "\u0002\u0002\u00cd\u00ce\u0007\u001f\u0002\u0002\u00ce\u00d3\u0005\u0006",
    "\u0004\u0002\u00cf\u00d0\u00079\u0002\u0002\u00d0\u00d1\u0005j6\u0002",
    "\u00d1\u00d2\u0007:\u0002\u0002\u00d2\u00d4\u0003\u0002\u0002\u0002",
    "\u00d3\u00cf\u0003\u0002\u0002\u0002\u00d3\u00d4\u0003\u0002\u0002\u0002",
    "\u00d4\u00d5\u0003\u0002\u0002\u0002\u00d5\u00d6\u00071\u0002\u0002",
    "\u00d6\u00dc\u0003\u0002\u0002\u0002\u00d7\u00d8\u0007E\u0002\u0002",
    "\u00d8\u00d9\u0005\u0006\u0004\u0002\u00d9\u00da\u00071\u0002\u0002",
    "\u00da\u00dc\u0003\u0002\u0002\u0002\u00db\u00cd\u0003\u0002\u0002\u0002",
    "\u00db\u00d7\u0003\u0002\u0002\u0002\u00dc\u0005\u0003\u0002\u0002\u0002",
    "\u00dd\u00de\u0007Q\u0002\u0002\u00de\u0007\u0003\u0002\u0002\u0002",
    "\u00df\u00e7\u0005\f\u0007\u0002\u00e0\u00e7\u0005\u0010\t\u0002\u00e1",
    "\u00e7\u0005$\u0013\u0002\u00e2\u00e7\u0005Z.\u0002\u00e3\u00e7\u0005",
    "^0\u0002\u00e4\u00e7\u0005\n\u0006\u0002\u00e5\u00e7\u0007I\u0002\u0002",
    "\u00e6\u00df\u0003\u0002\u0002\u0002\u00e6\u00e0\u0003\u0002\u0002\u0002",
    "\u00e6\u00e1\u0003\u0002\u0002\u0002\u00e6\u00e2\u0003\u0002\u0002\u0002",
    "\u00e6\u00e3\u0003\u0002\u0002\u0002\u00e6\u00e4\u0003\u0002\u0002\u0002",
    "\u00e6\u00e5\u0003\u0002\u0002\u0002\u00e7\u00ea\u0003\u0002\u0002\u0002",
    "\u00e8\u00e6\u0003\u0002\u0002\u0002\u00e8\u00e9\u0003\u0002\u0002\u0002",
    "\u00e9\u00eb\u0003\u0002\u0002\u0002\u00ea\u00e8\u0003\u0002\u0002\u0002",
    "\u00eb\u00ec\u0005\u00a8U\u0002\u00ec\t\u0003\u0002\u0002\u0002\u00ed",
    "\u00ee\u0007G\u0002\u0002\u00ee\u00ef\u0005j6\u0002\u00ef\u00f0\u0007",
    "1\u0002\u0002\u00f0\u000b\u0003\u0002\u0002\u0002\u00f1\u00f2\u0007",
    "\u0017\u0002\u0002\u00f2\u00f7\u0005\u000e\b\u0002\u00f3\u00f4\u0007",
    "0\u0002\u0002\u00f4\u00f6\u0005\u000e\b\u0002\u00f5\u00f3\u0003\u0002",
    "\u0002\u0002\u00f6\u00f9\u0003\u0002\u0002\u0002\u00f7\u00f5\u0003\u0002",
    "\u0002\u0002\u00f7\u00f8\u0003\u0002\u0002\u0002\u00f8\u00fa\u0003\u0002",
    "\u0002\u0002\u00f9\u00f7\u0003\u0002\u0002\u0002\u00fa\u00fb\u00071",
    "\u0002\u0002\u00fb\r\u0003\u0002\u0002\u0002\u00fc\u00fd\u0005\u001a",
    "\u000e\u0002\u00fd\u000f\u0003\u0002\u0002\u0002\u00fe\u0102\u0007\n",
    "\u0002\u0002\u00ff\u0100\u0005\u0012\n\u0002\u0100\u0101\u00071\u0002",
    "\u0002\u0101\u0103\u0003\u0002\u0002\u0002\u0102\u00ff\u0003\u0002\u0002",
    "\u0002\u0103\u0104\u0003\u0002\u0002\u0002\u0104\u0102\u0003\u0002\u0002",
    "\u0002\u0104\u0105\u0003\u0002\u0002\u0002\u0105\u0011\u0003\u0002\u0002",
    "\u0002\u0106\u0107\u0007Q\u0002\u0002\u0107\u0108\u00073\u0002\u0002",
    "\u0108\u0109\u0005\u0016\f\u0002\u0109\u0013\u0003\u0002\u0002\u0002",
    "\u010a\u010b\u0007\t\u0002\u0002\u010b\u010c\u00079\u0002\u0002\u010c",
    "\u010d\u0005\u001a\u000e\u0002\u010d\u010e\u0007:\u0002\u0002\u010e",
    "\u0015\u0003\u0002\u0002\u0002\u010f\u011b\u0005\u0018\r\u0002\u0110",
    "\u0111\u0005\u001e\u0010\u0002\u0111\u0112\u0005\u0018\r\u0002\u0112",
    "\u011b\u0003\u0002\u0002\u0002\u0113\u011b\u0005\u0006\u0004\u0002\u0114",
    "\u0115\u0005\u001e\u0010\u0002\u0115\u0116\u0005\u0006\u0004\u0002\u0116",
    "\u011b\u0003\u0002\u0002\u0002\u0117\u011b\u0005\"\u0012\u0002\u0118",
    "\u011b\u0005\u0014\u000b\u0002\u0119\u011b\u0005 \u0011\u0002\u011a",
    "\u010f\u0003\u0002\u0002\u0002\u011a\u0110\u0003\u0002\u0002\u0002\u011a",
    "\u0113\u0003\u0002\u0002\u0002\u011a\u0114\u0003\u0002\u0002\u0002\u011a",
    "\u0117\u0003\u0002\u0002\u0002\u011a\u0118\u0003\u0002\u0002\u0002\u011a",
    "\u0119\u0003\u0002\u0002\u0002\u011b\u0017\u0003\u0002\u0002\u0002\u011c",
    "\u011f\u0005\u001a\u000e\u0002\u011d\u011f\u0005\u001c\u000f\u0002\u011e",
    "\u011c\u0003\u0002\u0002\u0002\u011e\u011d\u0003\u0002\u0002\u0002\u011f",
    "\u0019\u0003\u0002\u0002\u0002\u0120\u0121\u0007S\u0002\u0002\u0121",
    "\u001b\u0003\u0002\u0002\u0002\u0122\u0123\u0007T\u0002\u0002\u0123",
    "\u001d\u0003\u0002\u0002\u0002\u0124\u0125\t\u0002\u0002\u0002\u0125",
    "\u001f\u0003\u0002\u0002\u0002\u0126\u0127\t\u0003\u0002\u0002\u0127",
    "!\u0003\u0002\u0002\u0002\u0128\u0129\u0007R\u0002\u0002\u0129#\u0003",
    "\u0002\u0002\u0002\u012a\u012e\u0007&\u0002\u0002\u012b\u012c\u0005",
    "&\u0014\u0002\u012c\u012d\u00071\u0002\u0002\u012d\u012f\u0003\u0002",
    "\u0002\u0002\u012e\u012b\u0003\u0002\u0002\u0002\u012f\u0130\u0003\u0002",
    "\u0002\u0002\u0130\u012e\u0003\u0002\u0002\u0002\u0130\u0131\u0003\u0002",
    "\u0002\u0002\u0131%\u0003\u0002\u0002\u0002\u0132\u0133\u0005\u0006",
    "\u0004\u0002\u0133\u0137\u00073\u0002\u0002\u0134\u0138\u0005,\u0017",
    "\u0002\u0135\u0138\u0005(\u0015\u0002\u0136\u0138\u0005*\u0016\u0002",
    "\u0137\u0134\u0003\u0002\u0002\u0002\u0137\u0135\u0003\u0002\u0002\u0002",
    "\u0137\u0136\u0003\u0002\u0002\u0002\u0138\'\u0003\u0002\u0002\u0002",
    "\u0139\u013b\u0007\u0012\u0002\u0002\u013a\u013c\u0005d3\u0002\u013b",
    "\u013a\u0003\u0002\u0002\u0002\u013b\u013c\u0003\u0002\u0002\u0002\u013c",
    "\u013d\u0003\u0002\u0002\u0002\u013d\u013e\u00072\u0002\u0002\u013e",
    "\u013f\u0005p9\u0002\u013f)\u0003\u0002\u0002\u0002\u0140\u0142\u0007",
    "\u001e\u0002\u0002\u0141\u0143\u0005d3\u0002\u0142\u0141\u0003\u0002",
    "\u0002\u0002\u0142\u0143\u0003\u0002\u0002\u0002\u0143+\u0003\u0002",
    "\u0002\u0002\u0144\u0148\u0005.\u0018\u0002\u0145\u0148\u00056\u001c",
    "\u0002\u0146\u0148\u0005X-\u0002\u0147\u0144\u0003\u0002\u0002\u0002",
    "\u0147\u0145\u0003\u0002\u0002\u0002\u0147\u0146\u0003\u0002\u0002\u0002",
    "\u0148-\u0003\u0002\u0002\u0002\u0149\u014e\u00050\u0019\u0002\u014a",
    "\u014e\u00052\u001a\u0002\u014b\u014e\u00054\u001b\u0002\u014c\u014e",
    "\u0005:\u001e\u0002\u014d\u0149\u0003\u0002\u0002\u0002\u014d\u014a",
    "\u0003\u0002\u0002\u0002\u014d\u014b\u0003\u0002\u0002\u0002\u014d\u014c",
    "\u0003\u0002\u0002\u0002\u014e/\u0003\u0002\u0002\u0002\u014f\u0150",
    "\u00079\u0002\u0002\u0150\u0151\u0005j6\u0002\u0151\u0152\u0007:\u0002",
    "\u0002\u01521\u0003\u0002\u0002\u0002\u0153\u0154\u0005\u0016\f\u0002",
    "\u0154\u0155\u0007B\u0002\u0002\u0155\u0156\u0005\u0016\f\u0002\u0156",
    "3\u0003\u0002\u0002\u0002\u0157\u015a\u0005\u0006\u0004\u0002\u0158",
    "\u015a\t\u0004\u0002\u0002\u0159\u0157\u0003\u0002\u0002\u0002\u0159",
    "\u0158\u0003\u0002\u0002\u0002\u015a5\u0003\u0002\u0002\u0002\u015b",
    "\u015c\u0007\u001d\u0002\u0002\u015c\u015f\u00058\u001d\u0002\u015d",
    "\u015f\u00058\u001d\u0002\u015e\u015b\u0003\u0002\u0002\u0002\u015e",
    "\u015d\u0003\u0002\u0002\u0002\u015f7\u0003\u0002\u0002\u0002\u0160",
    "\u0165\u0005<\u001f\u0002\u0161\u0165\u0005D#\u0002\u0162\u0165\u0005",
    "R*\u0002\u0163\u0165\u0005V,\u0002\u0164\u0160\u0003\u0002\u0002\u0002",
    "\u0164\u0161\u0003\u0002\u0002\u0002\u0164\u0162\u0003\u0002\u0002\u0002",
    "\u0164\u0163\u0003\u0002\u0002\u0002\u01659\u0003\u0002\u0002\u0002",
    "\u0166\u0167\u0007H\u0002\u0002\u0167\u016a\u0007;\u0002\u0002\u0168",
    "\u016b\u0005\u0006\u0004\u0002\u0169\u016b\u0005\u0018\r\u0002\u016a",
    "\u0168\u0003\u0002\u0002\u0002\u016a\u0169\u0003\u0002\u0002\u0002\u016b",
    "\u016c\u0003\u0002\u0002\u0002\u016c\u016d\u0007=\u0002\u0002\u016d",
    ";\u0003\u0002\u0002\u0002\u016e\u016f\u0007\u0004\u0002\u0002\u016f",
    "\u0170\u0007;\u0002\u0002\u0170\u0171\u0005> \u0002\u0171\u0172\u0007",
    "=\u0002\u0002\u0172\u0173\u0007\u001b\u0002\u0002\u0173\u0174\u0005",
    "B\"\u0002\u0174\u017d\u0003\u0002\u0002\u0002\u0175\u0176\u0007\u0004",
    "\u0002\u0002\u0176\u0177\u0007<\u0002\u0002\u0177\u0178\u0005> \u0002",
    "\u0178\u0179\u0007>\u0002\u0002\u0179\u017a\u0007\u001b\u0002\u0002",
    "\u017a\u017b\u0005B\"\u0002\u017b\u017d\u0003\u0002\u0002\u0002\u017c",
    "\u016e\u0003\u0002\u0002\u0002\u017c\u0175\u0003\u0002\u0002\u0002\u017d",
    "=\u0003\u0002\u0002\u0002\u017e\u0183\u0005@!\u0002\u017f\u0180\u0007",
    "0\u0002\u0002\u0180\u0182\u0005@!\u0002\u0181\u017f\u0003\u0002\u0002",
    "\u0002\u0182\u0185\u0003\u0002\u0002\u0002\u0183\u0181\u0003\u0002\u0002",
    "\u0002\u0183\u0184\u0003\u0002\u0002\u0002\u0184?\u0003\u0002\u0002",
    "\u0002\u0185\u0183\u0003\u0002\u0002\u0002\u0186\u0187\u0005.\u0018",
    "\u0002\u0187A\u0003\u0002\u0002\u0002\u0188\u0189\u0005,\u0017\u0002",
    "\u0189C\u0003\u0002\u0002\u0002\u018a\u018c\u0007!\u0002\u0002\u018b",
    "\u018d\u0005F$\u0002\u018c\u018b\u0003\u0002\u0002\u0002\u018c\u018d",
    "\u0003\u0002\u0002\u0002\u018d\u018e\u0003\u0002\u0002\u0002\u018e\u018f",
    "\u0007\u000f\u0002\u0002\u018fE\u0003\u0002\u0002\u0002\u0190\u0193",
    "\u0005H%\u0002\u0191\u0192\u00071\u0002\u0002\u0192\u0194\u0005L\'\u0002",
    "\u0193\u0191\u0003\u0002\u0002\u0002\u0193\u0194\u0003\u0002\u0002\u0002",
    "\u0194\u0197\u0003\u0002\u0002\u0002\u0195\u0197\u0005L\'\u0002\u0196",
    "\u0190\u0003\u0002\u0002\u0002\u0196\u0195\u0003\u0002\u0002\u0002\u0197",
    "G\u0003\u0002\u0002\u0002\u0198\u019d\u0005J&\u0002\u0199\u019a\u0007",
    "1\u0002\u0002\u019a\u019c\u0005J&\u0002\u019b\u0199\u0003\u0002\u0002",
    "\u0002\u019c\u019f\u0003\u0002\u0002\u0002\u019d\u019b\u0003\u0002\u0002",
    "\u0002\u019d\u019e\u0003\u0002\u0002\u0002\u019eI\u0003\u0002\u0002",
    "\u0002\u019f\u019d\u0003\u0002\u0002\u0002\u01a0\u01a1\u0005j6\u0002",
    "\u01a1\u01a2\u00072\u0002\u0002\u01a2\u01a3\u0005,\u0017\u0002\u01a3",
    "K\u0003\u0002\u0002\u0002\u01a4\u01a5\u0007\u0007\u0002\u0002\u01a5",
    "\u01a6\u0005N(\u0002\u01a6\u01a7\u0007\u001b\u0002\u0002\u01a7\u01ac",
    "\u0005P)\u0002\u01a8\u01a9\u00071\u0002\u0002\u01a9\u01ab\u0005P)\u0002",
    "\u01aa\u01a8\u0003\u0002\u0002\u0002\u01ab\u01ae\u0003\u0002\u0002\u0002",
    "\u01ac\u01aa\u0003\u0002\u0002\u0002\u01ac\u01ad\u0003\u0002\u0002\u0002",
    "\u01adM\u0003\u0002\u0002\u0002\u01ae\u01ac\u0003\u0002\u0002\u0002",
    "\u01af\u01b0\u0005\u0006\u0004\u0002\u01b0\u01b1\u00072\u0002\u0002",
    "\u01b1\u01b2\u00054\u001b\u0002\u01b2\u01b5\u0003\u0002\u0002\u0002",
    "\u01b3\u01b5\u00054\u001b\u0002\u01b4\u01af\u0003\u0002\u0002\u0002",
    "\u01b4\u01b3\u0003\u0002\u0002\u0002\u01b5O\u0003\u0002\u0002\u0002",
    "\u01b6\u01b7\u0005l7\u0002\u01b7\u01b8\u00072\u0002\u0002\u01b8\u01b9",
    "\u00079\u0002\u0002\u01b9\u01ba\u0005F$\u0002\u01ba\u01bb\u0007:\u0002",
    "\u0002\u01bbQ\u0003\u0002\u0002\u0002\u01bc\u01bd\u0007#\u0002\u0002",
    "\u01bd\u01be\u0007\u001b\u0002\u0002\u01be\u01bf\u0005T+\u0002\u01bf",
    "S\u0003\u0002\u0002\u0002\u01c0\u01c1\u0005.\u0018\u0002\u01c1U\u0003",
    "\u0002\u0002\u0002\u01c2\u01c3\u0007\u0010\u0002\u0002\u01c3\u01c4\u0007",
    "\u001b\u0002\u0002\u01c4\u01c7\u0005,\u0017\u0002\u01c5\u01c7\u0007",
    "\u0010\u0002\u0002\u01c6\u01c2\u0003\u0002\u0002\u0002\u01c6\u01c5\u0003",
    "\u0002\u0002\u0002\u01c7W\u0003\u0002\u0002\u0002\u01c8\u01c9\u0007",
    "?\u0002\u0002\u01c9\u01ca\u00054\u001b\u0002\u01caY\u0003\u0002\u0002",
    "\u0002\u01cb\u01cc\u0007(\u0002\u0002\u01cc\u01d1\u0005\\/\u0002\u01cd",
    "\u01ce\u00071\u0002\u0002\u01ce\u01d0\u0005\\/\u0002\u01cf\u01cd\u0003",
    "\u0002\u0002\u0002\u01d0\u01d3\u0003\u0002\u0002\u0002\u01d1\u01cf\u0003",
    "\u0002\u0002\u0002\u01d1\u01d2\u0003\u0002\u0002\u0002\u01d2\u01d4\u0003",
    "\u0002\u0002\u0002\u01d3\u01d1\u0003\u0002\u0002\u0002\u01d4\u01d5\u0007",
    "1\u0002\u0002\u01d5[\u0003\u0002\u0002\u0002\u01d6\u01d7\u0005j6\u0002",
    "\u01d7\u01d8\u00072\u0002\u0002\u01d8\u01d9\u0005,\u0017\u0002\u01d9",
    "]\u0003\u0002\u0002\u0002\u01da\u01db\u0005`1\u0002\u01db\u01dc\u0007",
    "1\u0002\u0002\u01dc_\u0003\u0002\u0002\u0002\u01dd\u01e0\u0005b2\u0002",
    "\u01de\u01e0\u0005n8\u0002\u01df\u01dd\u0003\u0002\u0002\u0002\u01df",
    "\u01de\u0003\u0002\u0002\u0002\u01e0a\u0003\u0002\u0002\u0002\u01e1",
    "\u01e2\u0007\u001e\u0002\u0002\u01e2\u01e4\u0005\u0006\u0004\u0002\u01e3",
    "\u01e5\u0005d3\u0002\u01e4\u01e3\u0003\u0002\u0002\u0002\u01e4\u01e5",
    "\u0003\u0002\u0002\u0002\u01e5\u01e6\u0003\u0002\u0002\u0002\u01e6\u01e7",
    "\u00071\u0002\u0002\u01e7\u01e8\u0005\b\u0005\u0002\u01e8c\u0003\u0002",
    "\u0002\u0002\u01e9\u01f2\u00079\u0002\u0002\u01ea\u01ef\u0005f4\u0002",
    "\u01eb\u01ec\u00071\u0002\u0002\u01ec\u01ee\u0005f4\u0002\u01ed\u01eb",
    "\u0003\u0002\u0002\u0002\u01ee\u01f1\u0003\u0002\u0002\u0002\u01ef\u01ed",
    "\u0003\u0002\u0002\u0002\u01ef\u01f0\u0003\u0002\u0002\u0002\u01f0\u01f3",
    "\u0003\u0002\u0002\u0002\u01f1\u01ef\u0003\u0002\u0002\u0002\u01f2\u01ea",
    "\u0003\u0002\u0002\u0002\u01f2\u01f3\u0003\u0002\u0002\u0002\u01f3\u01f4",
    "\u0003\u0002\u0002\u0002\u01f4\u01f5\u0007:\u0002\u0002\u01f5e\u0003",
    "\u0002\u0002\u0002\u01f6\u01fe\u0005h5\u0002\u01f7\u01f8\u0007(\u0002",
    "\u0002\u01f8\u01fe\u0005h5\u0002\u01f9\u01fa\u0007\u0012\u0002\u0002",
    "\u01fa\u01fe\u0005h5\u0002\u01fb\u01fc\u0007\u001e\u0002\u0002\u01fc",
    "\u01fe\u0005h5\u0002\u01fd\u01f6\u0003\u0002\u0002\u0002\u01fd\u01f7",
    "\u0003\u0002\u0002\u0002\u01fd\u01f9\u0003\u0002\u0002\u0002\u01fd\u01fb",
    "\u0003\u0002\u0002\u0002\u01feg\u0003\u0002\u0002\u0002\u01ff\u0200",
    "\u0005j6\u0002\u0200\u0201\u00072\u0002\u0002\u0201\u0202\u00054\u001b",
    "\u0002\u0202i\u0003\u0002\u0002\u0002\u0203\u0208\u0005\u0006\u0004",
    "\u0002\u0204\u0205\u00070\u0002\u0002\u0205\u0207\u0005\u0006\u0004",
    "\u0002\u0206\u0204\u0003\u0002\u0002\u0002\u0207\u020a\u0003\u0002\u0002",
    "\u0002\u0208\u0206\u0003\u0002\u0002\u0002\u0208\u0209\u0003\u0002\u0002",
    "\u0002\u0209k\u0003\u0002\u0002\u0002\u020a\u0208\u0003\u0002\u0002",
    "\u0002\u020b\u0210\u0005\u0016\f\u0002\u020c\u020d\u00070\u0002\u0002",
    "\u020d\u020f\u0005\u0016\f\u0002\u020e\u020c\u0003\u0002\u0002\u0002",
    "\u020f\u0212\u0003\u0002\u0002\u0002\u0210\u020e\u0003\u0002\u0002\u0002",
    "\u0210\u0211\u0003\u0002\u0002\u0002\u0211m\u0003\u0002\u0002\u0002",
    "\u0212\u0210\u0003\u0002\u0002\u0002\u0213\u0214\u0007\u0012\u0002\u0002",
    "\u0214\u0216\u0005\u0006\u0004\u0002\u0215\u0217\u0005d3\u0002\u0216",
    "\u0215\u0003\u0002\u0002\u0002\u0216\u0217\u0003\u0002\u0002\u0002\u0217",
    "\u0218\u0003\u0002\u0002\u0002\u0218\u0219\u00072\u0002\u0002\u0219",
    "\u021a\u0005p9\u0002\u021a\u021b\u00071\u0002\u0002\u021b\u021c\u0005",
    "\b\u0005\u0002\u021co\u0003\u0002\u0002\u0002\u021d\u021e\u00054\u001b",
    "\u0002\u021eq\u0003\u0002\u0002\u0002\u021f\u0220\u0005\u000e\b\u0002",
    "\u0220\u0221\u00072\u0002\u0002\u0221\u0222\u0005t;\u0002\u0222\u0225",
    "\u0003\u0002\u0002\u0002\u0223\u0225\u0005t;\u0002\u0224\u021f\u0003",
    "\u0002\u0002\u0002\u0224\u0223\u0003\u0002\u0002\u0002\u0225s\u0003",
    "\u0002\u0002\u0002\u0226\u0229\u0005v<\u0002\u0227\u0229\u0005\u00a6",
    "T\u0002\u0228\u0226\u0003\u0002\u0002\u0002\u0228\u0227\u0003\u0002",
    "\u0002\u0002\u0229u\u0003\u0002\u0002\u0002\u022a\u0230\u0005z>\u0002",
    "\u022b\u0230\u0005\u009aN\u0002\u022c\u0230\u0005\u00a0Q\u0002\u022d",
    "\u0230\u0005\u00a2R\u0002\u022e\u0230\u0005x=\u0002\u022f\u022a\u0003",
    "\u0002\u0002\u0002\u022f\u022b\u0003\u0002\u0002\u0002\u022f\u022c\u0003",
    "\u0002\u0002\u0002\u022f\u022d\u0003\u0002\u0002\u0002\u022f\u022e\u0003",
    "\u0002\u0002\u0002\u0230w\u0003\u0002\u0002\u0002\u0231\u0232\u0007",
    "L\u0002\u0002\u0232\u0240\u00079\u0002\u0002\u0233\u0235\t\u0005\u0002",
    "\u0002\u0234\u0233\u0003\u0002\u0002\u0002\u0234\u0235\u0003\u0002\u0002",
    "\u0002\u0235\u0236\u0003\u0002\u0002\u0002\u0236\u0238\u0005\"\u0012",
    "\u0002\u0237\u0239\t\u0005\u0002\u0002\u0238\u0237\u0003\u0002\u0002",
    "\u0002\u0238\u0239\u0003\u0002\u0002\u0002\u0239\u023f\u0003\u0002\u0002",
    "\u0002\u023a\u023f\u0005j6\u0002\u023b\u023f\u0005\u009aN\u0002\u023c",
    "\u023f\u0005 \u0011\u0002\u023d\u023f\u0007S\u0002\u0002\u023e\u0234",
    "\u0003\u0002\u0002\u0002\u023e\u023a\u0003\u0002\u0002\u0002\u023e\u023b",
    "\u0003\u0002\u0002\u0002\u023e\u023c\u0003\u0002\u0002\u0002\u023e\u023d",
    "\u0003\u0002\u0002\u0002\u023f\u0242\u0003\u0002\u0002\u0002\u0240\u023e",
    "\u0003\u0002\u0002\u0002\u0240\u0241\u0003\u0002\u0002\u0002\u0241\u0243",
    "\u0003\u0002\u0002\u0002\u0242\u0240\u0003\u0002\u0002\u0002\u0243\u024b",
    "\u0007:\u0002\u0002\u0244\u0245\u0007M\u0002\u0002\u0245\u0247\u0007",
    "9\u0002\u0002\u0246\u0248\u0005j6\u0002\u0247\u0246\u0003\u0002\u0002",
    "\u0002\u0247\u0248\u0003\u0002\u0002\u0002\u0248\u0249\u0003\u0002\u0002",
    "\u0002\u0249\u024b\u0007:\u0002\u0002\u024a\u0231\u0003\u0002\u0002",
    "\u0002\u024a\u0244\u0003\u0002\u0002\u0002\u024by\u0003\u0002\u0002",
    "\u0002\u024c\u024d\u0005|?\u0002\u024d\u024e\u0007/\u0002\u0002\u024e",
    "\u024f\u0005~@\u0002\u024f{\u0003\u0002\u0002\u0002\u0250\u0251\u0007",
    "@\u0002\u0002\u0251\u0254\u0005\u0006\u0004\u0002\u0252\u0254\u0005",
    "\u0006\u0004\u0002\u0253\u0250\u0003\u0002\u0002\u0002\u0253\u0252\u0003",
    "\u0002\u0002\u0002\u0254\u0270\u0003\u0002\u0002\u0002\u0255\u0256\u0007",
    ";\u0002\u0002\u0256\u025b\u0005~@\u0002\u0257\u0258\u00070\u0002\u0002",
    "\u0258\u025a\u0005~@\u0002\u0259\u0257\u0003\u0002\u0002\u0002\u025a",
    "\u025d\u0003\u0002\u0002\u0002\u025b\u0259\u0003\u0002\u0002\u0002\u025b",
    "\u025c\u0003\u0002\u0002\u0002\u025c\u025e\u0003\u0002\u0002\u0002\u025d",
    "\u025b\u0003\u0002\u0002\u0002\u025e\u025f\u0007=\u0002\u0002\u025f",
    "\u026f\u0003\u0002\u0002\u0002\u0260\u0261\u0007<\u0002\u0002\u0261",
    "\u0266\u0005~@\u0002\u0262\u0263\u00070\u0002\u0002\u0263\u0265\u0005",
    "~@\u0002\u0264\u0262\u0003\u0002\u0002\u0002\u0265\u0268\u0003\u0002",
    "\u0002\u0002\u0266\u0264\u0003\u0002\u0002\u0002\u0266\u0267\u0003\u0002",
    "\u0002\u0002\u0267\u0269\u0003\u0002\u0002\u0002\u0268\u0266\u0003\u0002",
    "\u0002\u0002\u0269\u026a\u0007>\u0002\u0002\u026a\u026f\u0003\u0002",
    "\u0002\u0002\u026b\u026c\u0007A\u0002\u0002\u026c\u026f\u0005\u0006",
    "\u0004\u0002\u026d\u026f\u0007?\u0002\u0002\u026e\u0255\u0003\u0002",
    "\u0002\u0002\u026e\u0260\u0003\u0002\u0002\u0002\u026e\u026b\u0003\u0002",
    "\u0002\u0002\u026e\u026d\u0003\u0002\u0002\u0002\u026f\u0272\u0003\u0002",
    "\u0002\u0002\u0270\u026e\u0003\u0002\u0002\u0002\u0270\u0271\u0003\u0002",
    "\u0002\u0002\u0271}\u0003\u0002\u0002\u0002\u0272\u0270\u0003\u0002",
    "\u0002\u0002\u0273\u0277\u0005\u0082B\u0002\u0274\u0275\u0005\u0080",
    "A\u0002\u0275\u0276\u0005~@\u0002\u0276\u0278\u0003\u0002\u0002\u0002",
    "\u0277\u0274\u0003\u0002\u0002\u0002\u0277\u0278\u0003\u0002\u0002\u0002",
    "\u0278\u007f\u0003\u0002\u0002\u0002\u0279\u027a\t\u0006\u0002\u0002",
    "\u027a\u0081\u0003\u0002\u0002\u0002\u027b\u027f\u0005\u0086D\u0002",
    "\u027c\u027d\u0005\u0084C\u0002\u027d\u027e\u0005\u0082B\u0002\u027e",
    "\u0280\u0003\u0002\u0002\u0002\u027f\u027c\u0003\u0002\u0002\u0002\u027f",
    "\u0280\u0003\u0002\u0002\u0002\u0280\u0083\u0003\u0002\u0002\u0002\u0281",
    "\u0282\t\u0007\u0002\u0002\u0282\u0085\u0003\u0002\u0002\u0002\u0283",
    "\u0287\u0005\u008aF\u0002\u0284\u0285\u0005\u0088E\u0002\u0285\u0286",
    "\u0005\u0086D\u0002\u0286\u0288\u0003\u0002\u0002\u0002\u0287\u0284",
    "\u0003\u0002\u0002\u0002\u0287\u0288\u0003\u0002\u0002\u0002\u0288\u0087",
    "\u0003\u0002\u0002\u0002\u0289\u028a\t\b\u0002\u0002\u028a\u0089\u0003",
    "\u0002\u0002\u0002\u028b\u028d\t\u0002\u0002\u0002\u028c\u028b\u0003",
    "\u0002\u0002\u0002\u028c\u028d\u0003\u0002\u0002\u0002\u028d\u028e\u0003",
    "\u0002\u0002\u0002\u028e\u028f\u0005\u008cG\u0002\u028f\u008b\u0003",
    "\u0002\u0002\u0002\u0290\u029c\u0005|?\u0002\u0291\u0292\u00079\u0002",
    "\u0002\u0292\u0293\u0005~@\u0002\u0293\u0294\u0007:\u0002\u0002\u0294",
    "\u029c\u0003\u0002\u0002\u0002\u0295\u029c\u0005\u0090I\u0002\u0296",
    "\u029c\u0005\u008eH\u0002\u0297\u029c\u0005\u0094K\u0002\u0298\u0299",
    "\u0007\u001a\u0002\u0002\u0299\u029c\u0005\u008cG\u0002\u029a\u029c",
    "\u0005 \u0011\u0002\u029b\u0290\u0003\u0002\u0002\u0002\u029b\u0291",
    "\u0003\u0002\u0002\u0002\u029b\u0295\u0003\u0002\u0002\u0002\u029b\u0296",
    "\u0003\u0002\u0002\u0002\u029b\u0297\u0003\u0002\u0002\u0002\u029b\u0298",
    "\u0003\u0002\u0002\u0002\u029b\u029a\u0003\u0002\u0002\u0002\u029c\u008d",
    "\u0003\u0002\u0002\u0002\u029d\u02a2\u0005\u0018\r\u0002\u029e\u02a2",
    "\u0005\u0014\u000b\u0002\u029f\u02a2\u0005\"\u0012\u0002\u02a0\u02a2",
    "\u0007\u0019\u0002\u0002\u02a1\u029d\u0003\u0002\u0002\u0002\u02a1\u029e",
    "\u0003\u0002\u0002\u0002\u02a1\u029f\u0003\u0002\u0002\u0002\u02a1\u02a0",
    "\u0003\u0002\u0002\u0002\u02a2\u008f\u0003\u0002\u0002\u0002\u02a3\u02a4",
    "\u0005\u0006\u0004\u0002\u02a4\u02a5\u00079\u0002\u0002\u02a5\u02a6",
    "\u0005\u0092J\u0002\u02a6\u02a7\u0007:\u0002\u0002\u02a7\u0091\u0003",
    "\u0002\u0002\u0002\u02a8\u02ad\u0005\u009cO\u0002\u02a9\u02aa\u0007",
    "0\u0002\u0002\u02aa\u02ac\u0005\u009cO\u0002\u02ab\u02a9\u0003\u0002",
    "\u0002\u0002\u02ac\u02af\u0003\u0002\u0002\u0002\u02ad\u02ab\u0003\u0002",
    "\u0002\u0002\u02ad\u02ae\u0003\u0002\u0002\u0002\u02ae\u0093\u0003\u0002",
    "\u0002\u0002\u02af\u02ad\u0003\u0002\u0002\u0002\u02b0\u02b1\u0007;",
    "\u0002\u0002\u02b1\u02b2\u0005\u0096L\u0002\u02b2\u02b3\u0007=\u0002",
    "\u0002\u02b3\u02b9\u0003\u0002\u0002\u0002\u02b4\u02b5\u0007<\u0002",
    "\u0002\u02b5\u02b6\u0005\u0096L\u0002\u02b6\u02b7\u0007>\u0002\u0002",
    "\u02b7\u02b9\u0003\u0002\u0002\u0002\u02b8\u02b0\u0003\u0002\u0002\u0002",
    "\u02b8\u02b4\u0003\u0002\u0002\u0002\u02b9\u0095\u0003\u0002\u0002\u0002",
    "\u02ba\u02bf\u0005\u0098M\u0002\u02bb\u02bc\u00070\u0002\u0002\u02bc",
    "\u02be\u0005\u0098M\u0002\u02bd\u02bb\u0003\u0002\u0002\u0002\u02be",
    "\u02c1\u0003\u0002\u0002\u0002\u02bf\u02bd\u0003\u0002\u0002\u0002\u02bf",
    "\u02c0\u0003\u0002\u0002\u0002\u02c0\u02c4\u0003\u0002\u0002\u0002\u02c1",
    "\u02bf\u0003\u0002\u0002\u0002\u02c2\u02c4\u0003\u0002\u0002\u0002\u02c3",
    "\u02ba\u0003\u0002\u0002\u0002\u02c3\u02c2\u0003\u0002\u0002\u0002\u02c4",
    "\u0097\u0003\u0002\u0002\u0002\u02c5\u02c8\u0005~@\u0002\u02c6\u02c7",
    "\u0007B\u0002\u0002\u02c7\u02c9\u0005~@\u0002\u02c8\u02c6\u0003\u0002",
    "\u0002\u0002\u02c8\u02c9\u0003\u0002\u0002\u0002\u02c9\u0099\u0003\u0002",
    "\u0002\u0002\u02ca\u02d0\u0005\u0006\u0004\u0002\u02cb\u02cd\u00079",
    "\u0002\u0002\u02cc\u02ce\u0005\u0092J\u0002\u02cd\u02cc\u0003\u0002",
    "\u0002\u0002\u02cd\u02ce\u0003\u0002\u0002\u0002\u02ce\u02cf\u0003\u0002",
    "\u0002\u0002\u02cf\u02d1\u0007:\u0002\u0002\u02d0\u02cb\u0003\u0002",
    "\u0002\u0002\u02d0\u02d1\u0003\u0002\u0002\u0002\u02d1\u009b\u0003\u0002",
    "\u0002\u0002\u02d2\u02d6\u0005~@\u0002\u02d3\u02d5\u0005\u009eP\u0002",
    "\u02d4\u02d3\u0003\u0002\u0002\u0002\u02d5\u02d8\u0003\u0002\u0002\u0002",
    "\u02d6\u02d4\u0003\u0002\u0002\u0002\u02d6\u02d7\u0003\u0002\u0002\u0002",
    "\u02d7\u009d\u0003\u0002\u0002\u0002\u02d8\u02d6\u0003\u0002\u0002\u0002",
    "\u02d9\u02da\u00072\u0002\u0002\u02da\u02db\u0005~@\u0002\u02db\u009f",
    "\u0003\u0002\u0002\u0002\u02dc\u02dd\u0007\u0013\u0002\u0002\u02dd\u02de",
    "\u0005\u000e\b\u0002\u02de\u00a1\u0003\u0002\u0002\u0002\u02df\u02e0",
    "\u0003\u0002\u0002\u0002\u02e0\u00a3\u0003\u0002\u0002\u0002\u02e1\u02e2",
    "\u0003\u0002\u0002\u0002\u02e2\u00a5\u0003\u0002\u0002\u0002\u02e3\u02e8",
    "\u0005\u00a8U\u0002\u02e4\u02e8\u0005\u00acW\u0002\u02e5\u02e8\u0005",
    "\u00b4[\u0002\u02e6\u02e8\u0005\u00c2b\u0002\u02e7\u02e3\u0003\u0002",
    "\u0002\u0002\u02e7\u02e4\u0003\u0002\u0002\u0002\u02e7\u02e5\u0003\u0002",
    "\u0002\u0002\u02e7\u02e6\u0003\u0002\u0002\u0002\u02e8\u00a7\u0003\u0002",
    "\u0002\u0002\u02e9\u02ea\u0007\u0005\u0002\u0002\u02ea\u02eb\u0005\u00aa",
    "V\u0002\u02eb\u02ec\u0007\u000f\u0002\u0002\u02ec\u00a9\u0003\u0002",
    "\u0002\u0002\u02ed\u02f2\u0005r:\u0002\u02ee\u02ef\u00071\u0002\u0002",
    "\u02ef\u02f1\u0005r:\u0002\u02f0\u02ee\u0003\u0002\u0002\u0002\u02f1",
    "\u02f4\u0003\u0002\u0002\u0002\u02f2\u02f0\u0003\u0002\u0002\u0002\u02f2",
    "\u02f3\u0003\u0002\u0002\u0002\u02f3\u00ab\u0003\u0002\u0002\u0002\u02f4",
    "\u02f2\u0003\u0002\u0002\u0002\u02f5\u02f8\u0005\u00aeX\u0002\u02f6",
    "\u02f8\u0005\u00b0Y\u0002\u02f7\u02f5\u0003\u0002\u0002\u0002\u02f7",
    "\u02f6\u0003\u0002\u0002\u0002\u02f8\u00ad\u0003\u0002\u0002\u0002\u02f9",
    "\u02fa\u0007\u0014\u0002\u0002\u02fa\u02fb\u0005~@\u0002\u02fb\u02fc",
    "\u0007$\u0002\u0002\u02fc\u02ff\u0005r:\u0002\u02fd\u02fe\u0007\u000e",
    "\u0002\u0002\u02fe\u0300\u0005r:\u0002\u02ff\u02fd\u0003\u0002\u0002",
    "\u0002\u02ff\u0300\u0003\u0002\u0002\u0002\u0300\u00af\u0003\u0002\u0002",
    "\u0002\u0301\u0302\u0007\u0007\u0002\u0002\u0302\u0303\u0005~@\u0002",
    "\u0303\u0304\u0007\u001b\u0002\u0002\u0304\u0309\u0005\u00b2Z\u0002",
    "\u0305\u0306\u00071\u0002\u0002\u0306\u0308\u0005\u00b2Z\u0002\u0307",
    "\u0305\u0003\u0002\u0002\u0002\u0308\u030b\u0003\u0002\u0002\u0002\u0309",
    "\u0307\u0003\u0002\u0002\u0002\u0309\u030a\u0003\u0002\u0002\u0002\u030a",
    "\u030f\u0003\u0002\u0002\u0002\u030b\u0309\u0003\u0002\u0002\u0002\u030c",
    "\u030d\u00071\u0002\u0002\u030d\u030e\u0007\u000e\u0002\u0002\u030e",
    "\u0310\u0005\u00aaV\u0002\u030f\u030c\u0003\u0002\u0002\u0002\u030f",
    "\u0310\u0003\u0002\u0002\u0002\u0310\u0311\u0003\u0002\u0002\u0002\u0311",
    "\u0312\u0007\u000f\u0002\u0002\u0312\u00b1\u0003\u0002\u0002\u0002\u0313",
    "\u0314\u0005l7\u0002\u0314\u0315\u00072\u0002\u0002\u0315\u0316\u0005",
    "r:\u0002\u0316\u00b3\u0003\u0002\u0002\u0002\u0317\u031b\u0005\u00b6",
    "\\\u0002\u0318\u031b\u0005\u00b8]\u0002\u0319\u031b\u0005\u00ba^\u0002",
    "\u031a\u0317\u0003\u0002\u0002\u0002\u031a\u0318\u0003\u0002\u0002\u0002",
    "\u031a\u0319\u0003\u0002\u0002\u0002\u031b\u00b5\u0003\u0002\u0002\u0002",
    "\u031c\u031d\u0007)\u0002\u0002\u031d\u031e\u0005~@\u0002\u031e\u031f",
    "\u0007\f\u0002\u0002\u031f\u0320\u0005r:\u0002\u0320\u00b7\u0003\u0002",
    "\u0002\u0002\u0321\u0322\u0007\"\u0002\u0002\u0322\u0323\u0005\u00aa",
    "V\u0002\u0323\u0324\u0007\'\u0002\u0002\u0324\u0325\u0005~@\u0002\u0325",
    "\u00b9\u0003\u0002\u0002\u0002\u0326\u0327\u0007\u0011\u0002\u0002\u0327",
    "\u0328\u0005\u0006\u0004\u0002\u0328\u0329\u0007/\u0002\u0002\u0329",
    "\u032a\u0005\u00bc_\u0002\u032a\u032b\u0007\f\u0002\u0002\u032b\u032c",
    "\u0005r:\u0002\u032c\u00bb\u0003\u0002\u0002\u0002\u032d\u032e\u0005",
    "\u00be`\u0002\u032e\u032f\t\t\u0002\u0002\u032f\u0330\u0005\u00c0a\u0002",
    "\u0330\u00bd\u0003\u0002\u0002\u0002\u0331\u0332\u0005~@\u0002\u0332",
    "\u00bf\u0003\u0002\u0002\u0002\u0333\u0334\u0005~@\u0002\u0334\u00c1",
    "\u0003\u0002\u0002\u0002\u0335\u0336\u0007*\u0002\u0002\u0336\u0337",
    "\u0005\u00c4c\u0002\u0337\u0338\u0007\f\u0002\u0002\u0338\u0339\u0005",
    "r:\u0002\u0339\u00c3\u0003\u0002\u0002\u0002\u033a\u033f\u0005|?\u0002",
    "\u033b\u033c\u00070\u0002\u0002\u033c\u033e\u0005|?\u0002\u033d\u033b",
    "\u0003\u0002\u0002\u0002\u033e\u0341\u0003\u0002\u0002\u0002\u033f\u033d",
    "\u0003\u0002\u0002\u0002\u033f\u0340\u0003\u0002\u0002\u0002\u0340\u00c5",
    "\u0003\u0002\u0002\u0002\u0341\u033f\u0003\u0002\u0002\u0002K\u00c8",
    "\u00d3\u00db\u00e6\u00e8\u00f7\u0104\u011a\u011e\u0130\u0137\u013b\u0142",
    "\u0147\u014d\u0159\u015e\u0164\u016a\u017c\u0183\u018c\u0193\u0196\u019d",
    "\u01ac\u01b4\u01c6\u01d1\u01df\u01e4\u01ef\u01f2\u01fd\u0208\u0210\u0216",
    "\u0224\u0228\u022f\u0234\u0238\u023e\u0240\u0247\u024a\u0253\u025b\u0266",
    "\u026e\u0270\u0277\u027f\u0287\u028c\u029b\u02a1\u02ad\u02b8\u02bf\u02c3",
    "\u02c8\u02cd\u02d0\u02d6\u02e7\u02f2\u02f7\u02ff\u0309\u030f\u031a\u033f"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, null, null, null,
                     null, null, null, null, null, null, null, null, null,
                     null, null, null, null, null, null, null, null, null,
                     null, null, null, null, null, null, null, null, null,
                     null, null, null, null, null, "'+'", "'-'", "'*'",
                     "'/'", "':='", "','", "';'", "':'", "'='", "'<>'",
                     "'<'", "'<='", "'>='", "'>'", "'('", "')'", "'['",
                     "'(.'", "']'", "'.)'", "'^'", "'@'", "'.'", "'..'",
                     "'{'", "'}'" ];

var symbolicNames = [ null, "AND", "ARRAY", "BEGIN", "BOOLEAN", "CASE",
                      "CHAR", "CHR", "CONST", "DIV", "DO", "DOWNTO", "ELSE",
                      "END", "FILE", "FOR", "FUNCTION", "GOTO", "IF", "IN",
                      "INTEGER", "LABEL", "MOD", "NIL", "NOT", "OF", "OR",
                      "PACKED", "PROCEDURE", "PROGRAM", "REAL", "RECORD",
                      "REPEAT", "SET", "THEN", "TO", "TYPE", "UNTIL", "VAR",
                      "WHILE", "WITH", "PLUS", "MINUS", "STAR", "SLASH",
                      "ASSIGN", "COMMA", "SEMI", "COLON", "EQUAL", "NOT_EQUAL",
                      "LT", "LE", "GE", "GT", "LPAREN", "RPAREN", "LBRACK",
                      "LBRACK2", "RBRACK", "RBRACK2", "POINTER", "AT", "DOT",
                      "DOTDOT", "LCURLY", "RCURLY", "UNIT", "INTERFACE",
                      "USES", "STRING", "IMPLEMENTATION", "TRUE", "FALSE",
                      "WRITE", "READ", "WS", "COMMENT_1", "COMMENT_2", "IDENT",
                      "STRING_LITERAL", "NUM_INT", "NUM_REAL" ];

var ruleNames =  [ "program", "programHeading", "identifier", "block", "usesUnitsPart",
                   "labelDeclarationPart", "label", "constantDefinitionPart",
                   "constantDefinition", "constantChr", "constant", "unsignedNumber",
                   "unsignedInteger", "unsignedReal", "sign", "bool", "string",
                   "typeDefinitionPart", "typeDefinition", "functionType",
                   "procedureType", "type", "simpleType", "scalarType",
                   "subrangeType", "typeIdentifier", "structuredType", "unpackedStructuredType",
                   "stringtype", "arrayType", "typeList", "indexType", "componentType",
                   "recordType", "fieldList", "fixedPart", "recordSection",
                   "variantPart", "tag", "variant", "setType", "baseType",
                   "fileType", "pointerType", "variableDeclarationPart",
                   "variableDeclaration", "procedureAndFunctionDeclarationPart",
                   "procedureOrFunctionDeclaration", "procedureDeclaration",
                   "formalParameterList", "formalParameterSection", "parameterGroup",
                   "identifierList", "constList", "functionDeclaration",
                   "resultType", "statement", "unlabelledStatement", "simpleStatement",
                   "ioStatement", "assignmentStatement", "variable", "expression",
                   "relationaloperator", "simpleExpression", "additiveoperator",
                   "term", "multiplicativeoperator", "signedFactor", "factor",
                   "unsignedConstant", "functionDesignator", "parameterList",
                   "set", "elementList", "element", "procedureStatement",
                   "actualParameter", "parameterwidth", "gotoStatement",
                   "emptyStatement", "empty", "structuredStatement", "compoundStatement",
                   "statements", "conditionalStatement", "ifStatement",
                   "caseStatement", "caseListElement", "repetetiveStatement",
                   "whileStatement", "repeatStatement", "forStatement",
                   "forList", "initialValue", "finalValue", "withStatement",
                   "recordVariableList" ];

function PascalGrammarParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

PascalGrammarParser.prototype = Object.create(antlr4.Parser.prototype);
PascalGrammarParser.prototype.constructor = PascalGrammarParser;

Object.defineProperty(PascalGrammarParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

PascalGrammarParser.EOF = antlr4.Token.EOF;
PascalGrammarParser.AND = 1;
PascalGrammarParser.ARRAY = 2;
PascalGrammarParser.BEGIN = 3;
PascalGrammarParser.BOOLEAN = 4;
PascalGrammarParser.CASE = 5;
PascalGrammarParser.CHAR = 6;
PascalGrammarParser.CHR = 7;
PascalGrammarParser.CONST = 8;
PascalGrammarParser.DIV = 9;
PascalGrammarParser.DO = 10;
PascalGrammarParser.DOWNTO = 11;
PascalGrammarParser.ELSE = 12;
PascalGrammarParser.END = 13;
PascalGrammarParser.FILE = 14;
PascalGrammarParser.FOR = 15;
PascalGrammarParser.FUNCTION = 16;
PascalGrammarParser.GOTO = 17;
PascalGrammarParser.IF = 18;
PascalGrammarParser.IN = 19;
PascalGrammarParser.INTEGER = 20;
PascalGrammarParser.LABEL = 21;
PascalGrammarParser.MOD = 22;
PascalGrammarParser.NIL = 23;
PascalGrammarParser.NOT = 24;
PascalGrammarParser.OF = 25;
PascalGrammarParser.OR = 26;
PascalGrammarParser.PACKED = 27;
PascalGrammarParser.PROCEDURE = 28;
PascalGrammarParser.PROGRAM = 29;
PascalGrammarParser.REAL = 30;
PascalGrammarParser.RECORD = 31;
PascalGrammarParser.REPEAT = 32;
PascalGrammarParser.SET = 33;
PascalGrammarParser.THEN = 34;
PascalGrammarParser.TO = 35;
PascalGrammarParser.TYPE = 36;
PascalGrammarParser.UNTIL = 37;
PascalGrammarParser.VAR = 38;
PascalGrammarParser.WHILE = 39;
PascalGrammarParser.WITH = 40;
PascalGrammarParser.PLUS = 41;
PascalGrammarParser.MINUS = 42;
PascalGrammarParser.STAR = 43;
PascalGrammarParser.SLASH = 44;
PascalGrammarParser.ASSIGN = 45;
PascalGrammarParser.COMMA = 46;
PascalGrammarParser.SEMI = 47;
PascalGrammarParser.COLON = 48;
PascalGrammarParser.EQUAL = 49;
PascalGrammarParser.NOT_EQUAL = 50;
PascalGrammarParser.LT = 51;
PascalGrammarParser.LE = 52;
PascalGrammarParser.GE = 53;
PascalGrammarParser.GT = 54;
PascalGrammarParser.LPAREN = 55;
PascalGrammarParser.RPAREN = 56;
PascalGrammarParser.LBRACK = 57;
PascalGrammarParser.LBRACK2 = 58;
PascalGrammarParser.RBRACK = 59;
PascalGrammarParser.RBRACK2 = 60;
PascalGrammarParser.POINTER = 61;
PascalGrammarParser.AT = 62;
PascalGrammarParser.DOT = 63;
PascalGrammarParser.DOTDOT = 64;
PascalGrammarParser.LCURLY = 65;
PascalGrammarParser.RCURLY = 66;
PascalGrammarParser.UNIT = 67;
PascalGrammarParser.INTERFACE = 68;
PascalGrammarParser.USES = 69;
PascalGrammarParser.STRING = 70;
PascalGrammarParser.IMPLEMENTATION = 71;
PascalGrammarParser.TRUE = 72;
PascalGrammarParser.FALSE = 73;
PascalGrammarParser.WRITE = 74;
PascalGrammarParser.READ = 75;
PascalGrammarParser.WS = 76;
PascalGrammarParser.COMMENT_1 = 77;
PascalGrammarParser.COMMENT_2 = 78;
PascalGrammarParser.IDENT = 79;
PascalGrammarParser.STRING_LITERAL = 80;
PascalGrammarParser.NUM_INT = 81;
PascalGrammarParser.NUM_REAL = 82;

PascalGrammarParser.RULE_program = 0;
PascalGrammarParser.RULE_programHeading = 1;
PascalGrammarParser.RULE_identifier = 2;
PascalGrammarParser.RULE_block = 3;
PascalGrammarParser.RULE_usesUnitsPart = 4;
PascalGrammarParser.RULE_labelDeclarationPart = 5;
PascalGrammarParser.RULE_label = 6;
PascalGrammarParser.RULE_constantDefinitionPart = 7;
PascalGrammarParser.RULE_constantDefinition = 8;
PascalGrammarParser.RULE_constantChr = 9;
PascalGrammarParser.RULE_constant = 10;
PascalGrammarParser.RULE_unsignedNumber = 11;
PascalGrammarParser.RULE_unsignedInteger = 12;
PascalGrammarParser.RULE_unsignedReal = 13;
PascalGrammarParser.RULE_sign = 14;
PascalGrammarParser.RULE_bool = 15;
PascalGrammarParser.RULE_string = 16;
PascalGrammarParser.RULE_typeDefinitionPart = 17;
PascalGrammarParser.RULE_typeDefinition = 18;
PascalGrammarParser.RULE_functionType = 19;
PascalGrammarParser.RULE_procedureType = 20;
PascalGrammarParser.RULE_type = 21;
PascalGrammarParser.RULE_simpleType = 22;
PascalGrammarParser.RULE_scalarType = 23;
PascalGrammarParser.RULE_subrangeType = 24;
PascalGrammarParser.RULE_typeIdentifier = 25;
PascalGrammarParser.RULE_structuredType = 26;
PascalGrammarParser.RULE_unpackedStructuredType = 27;
PascalGrammarParser.RULE_stringtype = 28;
PascalGrammarParser.RULE_arrayType = 29;
PascalGrammarParser.RULE_typeList = 30;
PascalGrammarParser.RULE_indexType = 31;
PascalGrammarParser.RULE_componentType = 32;
PascalGrammarParser.RULE_recordType = 33;
PascalGrammarParser.RULE_fieldList = 34;
PascalGrammarParser.RULE_fixedPart = 35;
PascalGrammarParser.RULE_recordSection = 36;
PascalGrammarParser.RULE_variantPart = 37;
PascalGrammarParser.RULE_tag = 38;
PascalGrammarParser.RULE_variant = 39;
PascalGrammarParser.RULE_setType = 40;
PascalGrammarParser.RULE_baseType = 41;
PascalGrammarParser.RULE_fileType = 42;
PascalGrammarParser.RULE_pointerType = 43;
PascalGrammarParser.RULE_variableDeclarationPart = 44;
PascalGrammarParser.RULE_variableDeclaration = 45;
PascalGrammarParser.RULE_procedureAndFunctionDeclarationPart = 46;
PascalGrammarParser.RULE_procedureOrFunctionDeclaration = 47;
PascalGrammarParser.RULE_procedureDeclaration = 48;
PascalGrammarParser.RULE_formalParameterList = 49;
PascalGrammarParser.RULE_formalParameterSection = 50;
PascalGrammarParser.RULE_parameterGroup = 51;
PascalGrammarParser.RULE_identifierList = 52;
PascalGrammarParser.RULE_constList = 53;
PascalGrammarParser.RULE_functionDeclaration = 54;
PascalGrammarParser.RULE_resultType = 55;
PascalGrammarParser.RULE_statement = 56;
PascalGrammarParser.RULE_unlabelledStatement = 57;
PascalGrammarParser.RULE_simpleStatement = 58;
PascalGrammarParser.RULE_ioStatement = 59;
PascalGrammarParser.RULE_assignmentStatement = 60;
PascalGrammarParser.RULE_variable = 61;
PascalGrammarParser.RULE_expression = 62;
PascalGrammarParser.RULE_relationaloperator = 63;
PascalGrammarParser.RULE_simpleExpression = 64;
PascalGrammarParser.RULE_additiveoperator = 65;
PascalGrammarParser.RULE_term = 66;
PascalGrammarParser.RULE_multiplicativeoperator = 67;
PascalGrammarParser.RULE_signedFactor = 68;
PascalGrammarParser.RULE_factor = 69;
PascalGrammarParser.RULE_unsignedConstant = 70;
PascalGrammarParser.RULE_functionDesignator = 71;
PascalGrammarParser.RULE_parameterList = 72;
PascalGrammarParser.RULE_set = 73;
PascalGrammarParser.RULE_elementList = 74;
PascalGrammarParser.RULE_element = 75;
PascalGrammarParser.RULE_procedureStatement = 76;
PascalGrammarParser.RULE_actualParameter = 77;
PascalGrammarParser.RULE_parameterwidth = 78;
PascalGrammarParser.RULE_gotoStatement = 79;
PascalGrammarParser.RULE_emptyStatement = 80;
PascalGrammarParser.RULE_empty = 81;
PascalGrammarParser.RULE_structuredStatement = 82;
PascalGrammarParser.RULE_compoundStatement = 83;
PascalGrammarParser.RULE_statements = 84;
PascalGrammarParser.RULE_conditionalStatement = 85;
PascalGrammarParser.RULE_ifStatement = 86;
PascalGrammarParser.RULE_caseStatement = 87;
PascalGrammarParser.RULE_caseListElement = 88;
PascalGrammarParser.RULE_repetetiveStatement = 89;
PascalGrammarParser.RULE_whileStatement = 90;
PascalGrammarParser.RULE_repeatStatement = 91;
PascalGrammarParser.RULE_forStatement = 92;
PascalGrammarParser.RULE_forList = 93;
PascalGrammarParser.RULE_initialValue = 94;
PascalGrammarParser.RULE_finalValue = 95;
PascalGrammarParser.RULE_withStatement = 96;
PascalGrammarParser.RULE_recordVariableList = 97;


function ProgramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_program;
    return this;
}

ProgramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramContext.prototype.constructor = ProgramContext;

ProgramContext.prototype.programHeading = function() {
    return this.getTypedRuleContext(ProgramHeadingContext,0);
};

ProgramContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ProgramContext.prototype.DOT = function() {
    return this.getToken(PascalGrammarParser.DOT, 0);
};

ProgramContext.prototype.INTERFACE = function() {
    return this.getToken(PascalGrammarParser.INTERFACE, 0);
};

ProgramContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterProgram(this);
	}
};

ProgramContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitProgram(this);
	}
};




PascalGrammarParser.ProgramContext = ProgramContext;

PascalGrammarParser.prototype.program = function() {

    var localctx = new ProgramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, PascalGrammarParser.RULE_program);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 196;
        this.programHeading();
        this.state = 198;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PascalGrammarParser.INTERFACE) {
            this.state = 197;
            this.match(PascalGrammarParser.INTERFACE);
        }

        this.state = 200;
        this.block();
        this.state = 201;
        this.match(PascalGrammarParser.DOT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProgramHeadingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_programHeading;
    return this;
}

ProgramHeadingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramHeadingContext.prototype.constructor = ProgramHeadingContext;

ProgramHeadingContext.prototype.PROGRAM = function() {
    return this.getToken(PascalGrammarParser.PROGRAM, 0);
};

ProgramHeadingContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ProgramHeadingContext.prototype.SEMI = function() {
    return this.getToken(PascalGrammarParser.SEMI, 0);
};

ProgramHeadingContext.prototype.LPAREN = function() {
    return this.getToken(PascalGrammarParser.LPAREN, 0);
};

ProgramHeadingContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

ProgramHeadingContext.prototype.RPAREN = function() {
    return this.getToken(PascalGrammarParser.RPAREN, 0);
};

ProgramHeadingContext.prototype.UNIT = function() {
    return this.getToken(PascalGrammarParser.UNIT, 0);
};

ProgramHeadingContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterProgramHeading(this);
	}
};

ProgramHeadingContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitProgramHeading(this);
	}
};




PascalGrammarParser.ProgramHeadingContext = ProgramHeadingContext;

PascalGrammarParser.prototype.programHeading = function() {

    var localctx = new ProgramHeadingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, PascalGrammarParser.RULE_programHeading);
    var _la = 0; // Token type
    try {
        this.state = 217;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PascalGrammarParser.PROGRAM:
            this.enterOuterAlt(localctx, 1);
            this.state = 203;
            this.match(PascalGrammarParser.PROGRAM);
            this.state = 204;
            this.identifier();
            this.state = 209;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PascalGrammarParser.LPAREN) {
                this.state = 205;
                this.match(PascalGrammarParser.LPAREN);
                this.state = 206;
                this.identifierList();
                this.state = 207;
                this.match(PascalGrammarParser.RPAREN);
            }

            this.state = 211;
            this.match(PascalGrammarParser.SEMI);
            break;
        case PascalGrammarParser.UNIT:
            this.enterOuterAlt(localctx, 2);
            this.state = 213;
            this.match(PascalGrammarParser.UNIT);
            this.state = 214;
            this.identifier();
            this.state = 215;
            this.match(PascalGrammarParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.IDENT = function() {
    return this.getToken(PascalGrammarParser.IDENT, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitIdentifier(this);
	}
};




PascalGrammarParser.IdentifierContext = IdentifierContext;

PascalGrammarParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, PascalGrammarParser.RULE_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 219;
        this.match(PascalGrammarParser.IDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

BlockContext.prototype.labelDeclarationPart = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LabelDeclarationPartContext);
    } else {
        return this.getTypedRuleContext(LabelDeclarationPartContext,i);
    }
};

BlockContext.prototype.constantDefinitionPart = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantDefinitionPartContext);
    } else {
        return this.getTypedRuleContext(ConstantDefinitionPartContext,i);
    }
};

BlockContext.prototype.typeDefinitionPart = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeDefinitionPartContext);
    } else {
        return this.getTypedRuleContext(TypeDefinitionPartContext,i);
    }
};

BlockContext.prototype.variableDeclarationPart = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclarationPartContext);
    } else {
        return this.getTypedRuleContext(VariableDeclarationPartContext,i);
    }
};

BlockContext.prototype.procedureAndFunctionDeclarationPart = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProcedureAndFunctionDeclarationPartContext);
    } else {
        return this.getTypedRuleContext(ProcedureAndFunctionDeclarationPartContext,i);
    }
};

BlockContext.prototype.usesUnitsPart = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UsesUnitsPartContext);
    } else {
        return this.getTypedRuleContext(UsesUnitsPartContext,i);
    }
};

BlockContext.prototype.IMPLEMENTATION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.IMPLEMENTATION);
    } else {
        return this.getToken(PascalGrammarParser.IMPLEMENTATION, i);
    }
};


BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitBlock(this);
	}
};




PascalGrammarParser.BlockContext = BlockContext;

PascalGrammarParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, PascalGrammarParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 230;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 8)) & ~0x1f) == 0 && ((1 << (_la - 8)) & ((1 << (PascalGrammarParser.CONST - 8)) | (1 << (PascalGrammarParser.FUNCTION - 8)) | (1 << (PascalGrammarParser.LABEL - 8)) | (1 << (PascalGrammarParser.PROCEDURE - 8)) | (1 << (PascalGrammarParser.TYPE - 8)) | (1 << (PascalGrammarParser.VAR - 8)))) !== 0) || _la===PascalGrammarParser.USES || _la===PascalGrammarParser.IMPLEMENTATION) {
            this.state = 228;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PascalGrammarParser.LABEL:
                this.state = 221;
                this.labelDeclarationPart();
                break;
            case PascalGrammarParser.CONST:
                this.state = 222;
                this.constantDefinitionPart();
                break;
            case PascalGrammarParser.TYPE:
                this.state = 223;
                this.typeDefinitionPart();
                break;
            case PascalGrammarParser.VAR:
                this.state = 224;
                this.variableDeclarationPart();
                break;
            case PascalGrammarParser.FUNCTION:
            case PascalGrammarParser.PROCEDURE:
                this.state = 225;
                this.procedureAndFunctionDeclarationPart();
                break;
            case PascalGrammarParser.USES:
                this.state = 226;
                this.usesUnitsPart();
                break;
            case PascalGrammarParser.IMPLEMENTATION:
                this.state = 227;
                this.match(PascalGrammarParser.IMPLEMENTATION);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 232;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 233;
        this.compoundStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UsesUnitsPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_usesUnitsPart;
    return this;
}

UsesUnitsPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsesUnitsPartContext.prototype.constructor = UsesUnitsPartContext;

UsesUnitsPartContext.prototype.USES = function() {
    return this.getToken(PascalGrammarParser.USES, 0);
};

UsesUnitsPartContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

UsesUnitsPartContext.prototype.SEMI = function() {
    return this.getToken(PascalGrammarParser.SEMI, 0);
};

UsesUnitsPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterUsesUnitsPart(this);
	}
};

UsesUnitsPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitUsesUnitsPart(this);
	}
};




PascalGrammarParser.UsesUnitsPartContext = UsesUnitsPartContext;

PascalGrammarParser.prototype.usesUnitsPart = function() {

    var localctx = new UsesUnitsPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, PascalGrammarParser.RULE_usesUnitsPart);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 235;
        this.match(PascalGrammarParser.USES);
        this.state = 236;
        this.identifierList();
        this.state = 237;
        this.match(PascalGrammarParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LabelDeclarationPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_labelDeclarationPart;
    return this;
}

LabelDeclarationPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelDeclarationPartContext.prototype.constructor = LabelDeclarationPartContext;

LabelDeclarationPartContext.prototype.LABEL = function() {
    return this.getToken(PascalGrammarParser.LABEL, 0);
};

LabelDeclarationPartContext.prototype.label = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LabelContext);
    } else {
        return this.getTypedRuleContext(LabelContext,i);
    }
};

LabelDeclarationPartContext.prototype.SEMI = function() {
    return this.getToken(PascalGrammarParser.SEMI, 0);
};

LabelDeclarationPartContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.COMMA);
    } else {
        return this.getToken(PascalGrammarParser.COMMA, i);
    }
};


LabelDeclarationPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterLabelDeclarationPart(this);
	}
};

LabelDeclarationPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitLabelDeclarationPart(this);
	}
};




PascalGrammarParser.LabelDeclarationPartContext = LabelDeclarationPartContext;

PascalGrammarParser.prototype.labelDeclarationPart = function() {

    var localctx = new LabelDeclarationPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, PascalGrammarParser.RULE_labelDeclarationPart);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 239;
        this.match(PascalGrammarParser.LABEL);
        this.state = 240;
        this.label();
        this.state = 245;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PascalGrammarParser.COMMA) {
            this.state = 241;
            this.match(PascalGrammarParser.COMMA);
            this.state = 242;
            this.label();
            this.state = 247;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 248;
        this.match(PascalGrammarParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LabelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_label;
    return this;
}

LabelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelContext.prototype.constructor = LabelContext;

LabelContext.prototype.unsignedInteger = function() {
    return this.getTypedRuleContext(UnsignedIntegerContext,0);
};

LabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterLabel(this);
	}
};

LabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitLabel(this);
	}
};




PascalGrammarParser.LabelContext = LabelContext;

PascalGrammarParser.prototype.label = function() {

    var localctx = new LabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, PascalGrammarParser.RULE_label);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 250;
        this.unsignedInteger();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstantDefinitionPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_constantDefinitionPart;
    return this;
}

ConstantDefinitionPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantDefinitionPartContext.prototype.constructor = ConstantDefinitionPartContext;

ConstantDefinitionPartContext.prototype.CONST = function() {
    return this.getToken(PascalGrammarParser.CONST, 0);
};

ConstantDefinitionPartContext.prototype.constantDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantDefinitionContext);
    } else {
        return this.getTypedRuleContext(ConstantDefinitionContext,i);
    }
};

ConstantDefinitionPartContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.SEMI);
    } else {
        return this.getToken(PascalGrammarParser.SEMI, i);
    }
};


ConstantDefinitionPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterConstantDefinitionPart(this);
	}
};

ConstantDefinitionPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitConstantDefinitionPart(this);
	}
};




PascalGrammarParser.ConstantDefinitionPartContext = ConstantDefinitionPartContext;

PascalGrammarParser.prototype.constantDefinitionPart = function() {

    var localctx = new ConstantDefinitionPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, PascalGrammarParser.RULE_constantDefinitionPart);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 252;
        this.match(PascalGrammarParser.CONST);
        this.state = 256;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 253;
            this.constantDefinition();
            this.state = 254;
            this.match(PascalGrammarParser.SEMI);
            this.state = 258;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PascalGrammarParser.IDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstantDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_constantDefinition;
    return this;
}

ConstantDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantDefinitionContext.prototype.constructor = ConstantDefinitionContext;

ConstantDefinitionContext.prototype.IDENT = function() {
    return this.getToken(PascalGrammarParser.IDENT, 0);
};

ConstantDefinitionContext.prototype.EQUAL = function() {
    return this.getToken(PascalGrammarParser.EQUAL, 0);
};

ConstantDefinitionContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

ConstantDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterConstantDefinition(this);
	}
};

ConstantDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitConstantDefinition(this);
	}
};




PascalGrammarParser.ConstantDefinitionContext = ConstantDefinitionContext;

PascalGrammarParser.prototype.constantDefinition = function() {

    var localctx = new ConstantDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, PascalGrammarParser.RULE_constantDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 260;
        this.match(PascalGrammarParser.IDENT);
        this.state = 261;
        this.match(PascalGrammarParser.EQUAL);
        this.state = 262;
        this.constant();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstantChrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_constantChr;
    return this;
}

ConstantChrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantChrContext.prototype.constructor = ConstantChrContext;

ConstantChrContext.prototype.CHR = function() {
    return this.getToken(PascalGrammarParser.CHR, 0);
};

ConstantChrContext.prototype.LPAREN = function() {
    return this.getToken(PascalGrammarParser.LPAREN, 0);
};

ConstantChrContext.prototype.unsignedInteger = function() {
    return this.getTypedRuleContext(UnsignedIntegerContext,0);
};

ConstantChrContext.prototype.RPAREN = function() {
    return this.getToken(PascalGrammarParser.RPAREN, 0);
};

ConstantChrContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterConstantChr(this);
	}
};

ConstantChrContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitConstantChr(this);
	}
};




PascalGrammarParser.ConstantChrContext = ConstantChrContext;

PascalGrammarParser.prototype.constantChr = function() {

    var localctx = new ConstantChrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, PascalGrammarParser.RULE_constantChr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 264;
        this.match(PascalGrammarParser.CHR);
        this.state = 265;
        this.match(PascalGrammarParser.LPAREN);
        this.state = 266;
        this.unsignedInteger();
        this.state = 267;
        this.match(PascalGrammarParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_constant;
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.unsignedNumber = function() {
    return this.getTypedRuleContext(UnsignedNumberContext,0);
};

ConstantContext.prototype.sign = function() {
    return this.getTypedRuleContext(SignContext,0);
};

ConstantContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ConstantContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

ConstantContext.prototype.constantChr = function() {
    return this.getTypedRuleContext(ConstantChrContext,0);
};

ConstantContext.prototype.bool = function() {
    return this.getTypedRuleContext(BoolContext,0);
};

ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterConstant(this);
	}
};

ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitConstant(this);
	}
};




PascalGrammarParser.ConstantContext = ConstantContext;

PascalGrammarParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, PascalGrammarParser.RULE_constant);
    try {
        this.state = 280;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 269;
            this.unsignedNumber();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 270;
            this.sign();
            this.state = 271;
            this.unsignedNumber();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 273;
            this.identifier();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 274;
            this.sign();
            this.state = 275;
            this.identifier();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 277;
            this.string();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 278;
            this.constantChr();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 279;
            this.bool();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnsignedNumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_unsignedNumber;
    return this;
}

UnsignedNumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnsignedNumberContext.prototype.constructor = UnsignedNumberContext;

UnsignedNumberContext.prototype.unsignedInteger = function() {
    return this.getTypedRuleContext(UnsignedIntegerContext,0);
};

UnsignedNumberContext.prototype.unsignedReal = function() {
    return this.getTypedRuleContext(UnsignedRealContext,0);
};

UnsignedNumberContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterUnsignedNumber(this);
	}
};

UnsignedNumberContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitUnsignedNumber(this);
	}
};




PascalGrammarParser.UnsignedNumberContext = UnsignedNumberContext;

PascalGrammarParser.prototype.unsignedNumber = function() {

    var localctx = new UnsignedNumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, PascalGrammarParser.RULE_unsignedNumber);
    try {
        this.state = 284;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PascalGrammarParser.NUM_INT:
            this.enterOuterAlt(localctx, 1);
            this.state = 282;
            this.unsignedInteger();
            break;
        case PascalGrammarParser.NUM_REAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 283;
            this.unsignedReal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnsignedIntegerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_unsignedInteger;
    return this;
}

UnsignedIntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnsignedIntegerContext.prototype.constructor = UnsignedIntegerContext;

UnsignedIntegerContext.prototype.NUM_INT = function() {
    return this.getToken(PascalGrammarParser.NUM_INT, 0);
};

UnsignedIntegerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterUnsignedInteger(this);
	}
};

UnsignedIntegerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitUnsignedInteger(this);
	}
};




PascalGrammarParser.UnsignedIntegerContext = UnsignedIntegerContext;

PascalGrammarParser.prototype.unsignedInteger = function() {

    var localctx = new UnsignedIntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, PascalGrammarParser.RULE_unsignedInteger);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 286;
        this.match(PascalGrammarParser.NUM_INT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnsignedRealContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_unsignedReal;
    return this;
}

UnsignedRealContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnsignedRealContext.prototype.constructor = UnsignedRealContext;

UnsignedRealContext.prototype.NUM_REAL = function() {
    return this.getToken(PascalGrammarParser.NUM_REAL, 0);
};

UnsignedRealContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterUnsignedReal(this);
	}
};

UnsignedRealContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitUnsignedReal(this);
	}
};




PascalGrammarParser.UnsignedRealContext = UnsignedRealContext;

PascalGrammarParser.prototype.unsignedReal = function() {

    var localctx = new UnsignedRealContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, PascalGrammarParser.RULE_unsignedReal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 288;
        this.match(PascalGrammarParser.NUM_REAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SignContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_sign;
    return this;
}

SignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignContext.prototype.constructor = SignContext;

SignContext.prototype.PLUS = function() {
    return this.getToken(PascalGrammarParser.PLUS, 0);
};

SignContext.prototype.MINUS = function() {
    return this.getToken(PascalGrammarParser.MINUS, 0);
};

SignContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterSign(this);
	}
};

SignContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitSign(this);
	}
};




PascalGrammarParser.SignContext = SignContext;

PascalGrammarParser.prototype.sign = function() {

    var localctx = new SignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, PascalGrammarParser.RULE_sign);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 290;
        _la = this._input.LA(1);
        if(!(_la===PascalGrammarParser.PLUS || _la===PascalGrammarParser.MINUS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BoolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_bool;
    return this;
}

BoolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BoolContext.prototype.constructor = BoolContext;

BoolContext.prototype.TRUE = function() {
    return this.getToken(PascalGrammarParser.TRUE, 0);
};

BoolContext.prototype.FALSE = function() {
    return this.getToken(PascalGrammarParser.FALSE, 0);
};

BoolContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterBool(this);
	}
};

BoolContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitBool(this);
	}
};




PascalGrammarParser.BoolContext = BoolContext;

PascalGrammarParser.prototype.bool = function() {

    var localctx = new BoolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, PascalGrammarParser.RULE_bool);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 292;
        _la = this._input.LA(1);
        if(!(_la===PascalGrammarParser.TRUE || _la===PascalGrammarParser.FALSE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_string;
    return this;
}

StringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringContext.prototype.constructor = StringContext;

StringContext.prototype.STRING_LITERAL = function() {
    return this.getToken(PascalGrammarParser.STRING_LITERAL, 0);
};

StringContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterString(this);
	}
};

StringContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitString(this);
	}
};




PascalGrammarParser.StringContext = StringContext;

PascalGrammarParser.prototype.string = function() {

    var localctx = new StringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, PascalGrammarParser.RULE_string);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 294;
        this.match(PascalGrammarParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeDefinitionPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_typeDefinitionPart;
    return this;
}

TypeDefinitionPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeDefinitionPartContext.prototype.constructor = TypeDefinitionPartContext;

TypeDefinitionPartContext.prototype.TYPE = function() {
    return this.getToken(PascalGrammarParser.TYPE, 0);
};

TypeDefinitionPartContext.prototype.typeDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeDefinitionContext);
    } else {
        return this.getTypedRuleContext(TypeDefinitionContext,i);
    }
};

TypeDefinitionPartContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.SEMI);
    } else {
        return this.getToken(PascalGrammarParser.SEMI, i);
    }
};


TypeDefinitionPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterTypeDefinitionPart(this);
	}
};

TypeDefinitionPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitTypeDefinitionPart(this);
	}
};




PascalGrammarParser.TypeDefinitionPartContext = TypeDefinitionPartContext;

PascalGrammarParser.prototype.typeDefinitionPart = function() {

    var localctx = new TypeDefinitionPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, PascalGrammarParser.RULE_typeDefinitionPart);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 296;
        this.match(PascalGrammarParser.TYPE);
        this.state = 300;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 297;
            this.typeDefinition();
            this.state = 298;
            this.match(PascalGrammarParser.SEMI);
            this.state = 302;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PascalGrammarParser.IDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_typeDefinition;
    return this;
}

TypeDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeDefinitionContext.prototype.constructor = TypeDefinitionContext;

TypeDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TypeDefinitionContext.prototype.EQUAL = function() {
    return this.getToken(PascalGrammarParser.EQUAL, 0);
};

TypeDefinitionContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeDefinitionContext.prototype.functionType = function() {
    return this.getTypedRuleContext(FunctionTypeContext,0);
};

TypeDefinitionContext.prototype.procedureType = function() {
    return this.getTypedRuleContext(ProcedureTypeContext,0);
};

TypeDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterTypeDefinition(this);
	}
};

TypeDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitTypeDefinition(this);
	}
};




PascalGrammarParser.TypeDefinitionContext = TypeDefinitionContext;

PascalGrammarParser.prototype.typeDefinition = function() {

    var localctx = new TypeDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, PascalGrammarParser.RULE_typeDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 304;
        this.identifier();
        this.state = 305;
        this.match(PascalGrammarParser.EQUAL);
        this.state = 309;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PascalGrammarParser.ARRAY:
        case PascalGrammarParser.BOOLEAN:
        case PascalGrammarParser.CHAR:
        case PascalGrammarParser.CHR:
        case PascalGrammarParser.FILE:
        case PascalGrammarParser.INTEGER:
        case PascalGrammarParser.PACKED:
        case PascalGrammarParser.REAL:
        case PascalGrammarParser.RECORD:
        case PascalGrammarParser.SET:
        case PascalGrammarParser.PLUS:
        case PascalGrammarParser.MINUS:
        case PascalGrammarParser.LPAREN:
        case PascalGrammarParser.POINTER:
        case PascalGrammarParser.STRING:
        case PascalGrammarParser.TRUE:
        case PascalGrammarParser.FALSE:
        case PascalGrammarParser.IDENT:
        case PascalGrammarParser.STRING_LITERAL:
        case PascalGrammarParser.NUM_INT:
        case PascalGrammarParser.NUM_REAL:
            this.state = 306;
            this.type();
            break;
        case PascalGrammarParser.FUNCTION:
            this.state = 307;
            this.functionType();
            break;
        case PascalGrammarParser.PROCEDURE:
            this.state = 308;
            this.procedureType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_functionType;
    return this;
}

FunctionTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionTypeContext.prototype.constructor = FunctionTypeContext;

FunctionTypeContext.prototype.FUNCTION = function() {
    return this.getToken(PascalGrammarParser.FUNCTION, 0);
};

FunctionTypeContext.prototype.COLON = function() {
    return this.getToken(PascalGrammarParser.COLON, 0);
};

FunctionTypeContext.prototype.resultType = function() {
    return this.getTypedRuleContext(ResultTypeContext,0);
};

FunctionTypeContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

FunctionTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterFunctionType(this);
	}
};

FunctionTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitFunctionType(this);
	}
};




PascalGrammarParser.FunctionTypeContext = FunctionTypeContext;

PascalGrammarParser.prototype.functionType = function() {

    var localctx = new FunctionTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, PascalGrammarParser.RULE_functionType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 311;
        this.match(PascalGrammarParser.FUNCTION);
        this.state = 313;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PascalGrammarParser.LPAREN) {
            this.state = 312;
            this.formalParameterList();
        }

        this.state = 315;
        this.match(PascalGrammarParser.COLON);
        this.state = 316;
        this.resultType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProcedureTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_procedureType;
    return this;
}

ProcedureTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureTypeContext.prototype.constructor = ProcedureTypeContext;

ProcedureTypeContext.prototype.PROCEDURE = function() {
    return this.getToken(PascalGrammarParser.PROCEDURE, 0);
};

ProcedureTypeContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

ProcedureTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterProcedureType(this);
	}
};

ProcedureTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitProcedureType(this);
	}
};




PascalGrammarParser.ProcedureTypeContext = ProcedureTypeContext;

PascalGrammarParser.prototype.procedureType = function() {

    var localctx = new ProcedureTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, PascalGrammarParser.RULE_procedureType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 318;
        this.match(PascalGrammarParser.PROCEDURE);
        this.state = 320;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PascalGrammarParser.LPAREN) {
            this.state = 319;
            this.formalParameterList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.simpleType = function() {
    return this.getTypedRuleContext(SimpleTypeContext,0);
};

TypeContext.prototype.structuredType = function() {
    return this.getTypedRuleContext(StructuredTypeContext,0);
};

TypeContext.prototype.pointerType = function() {
    return this.getTypedRuleContext(PointerTypeContext,0);
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitType(this);
	}
};




PascalGrammarParser.TypeContext = TypeContext;

PascalGrammarParser.prototype.type = function() {

    var localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, PascalGrammarParser.RULE_type);
    try {
        this.state = 325;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PascalGrammarParser.BOOLEAN:
        case PascalGrammarParser.CHAR:
        case PascalGrammarParser.CHR:
        case PascalGrammarParser.INTEGER:
        case PascalGrammarParser.REAL:
        case PascalGrammarParser.PLUS:
        case PascalGrammarParser.MINUS:
        case PascalGrammarParser.LPAREN:
        case PascalGrammarParser.STRING:
        case PascalGrammarParser.TRUE:
        case PascalGrammarParser.FALSE:
        case PascalGrammarParser.IDENT:
        case PascalGrammarParser.STRING_LITERAL:
        case PascalGrammarParser.NUM_INT:
        case PascalGrammarParser.NUM_REAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 322;
            this.simpleType();
            break;
        case PascalGrammarParser.ARRAY:
        case PascalGrammarParser.FILE:
        case PascalGrammarParser.PACKED:
        case PascalGrammarParser.RECORD:
        case PascalGrammarParser.SET:
            this.enterOuterAlt(localctx, 2);
            this.state = 323;
            this.structuredType();
            break;
        case PascalGrammarParser.POINTER:
            this.enterOuterAlt(localctx, 3);
            this.state = 324;
            this.pointerType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpleTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_simpleType;
    return this;
}

SimpleTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleTypeContext.prototype.constructor = SimpleTypeContext;

SimpleTypeContext.prototype.scalarType = function() {
    return this.getTypedRuleContext(ScalarTypeContext,0);
};

SimpleTypeContext.prototype.subrangeType = function() {
    return this.getTypedRuleContext(SubrangeTypeContext,0);
};

SimpleTypeContext.prototype.typeIdentifier = function() {
    return this.getTypedRuleContext(TypeIdentifierContext,0);
};

SimpleTypeContext.prototype.stringtype = function() {
    return this.getTypedRuleContext(StringtypeContext,0);
};

SimpleTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterSimpleType(this);
	}
};

SimpleTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitSimpleType(this);
	}
};




PascalGrammarParser.SimpleTypeContext = SimpleTypeContext;

PascalGrammarParser.prototype.simpleType = function() {

    var localctx = new SimpleTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, PascalGrammarParser.RULE_simpleType);
    try {
        this.state = 331;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 327;
            this.scalarType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 328;
            this.subrangeType();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 329;
            this.typeIdentifier();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 330;
            this.stringtype();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ScalarTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_scalarType;
    return this;
}

ScalarTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScalarTypeContext.prototype.constructor = ScalarTypeContext;

ScalarTypeContext.prototype.LPAREN = function() {
    return this.getToken(PascalGrammarParser.LPAREN, 0);
};

ScalarTypeContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

ScalarTypeContext.prototype.RPAREN = function() {
    return this.getToken(PascalGrammarParser.RPAREN, 0);
};

ScalarTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterScalarType(this);
	}
};

ScalarTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitScalarType(this);
	}
};




PascalGrammarParser.ScalarTypeContext = ScalarTypeContext;

PascalGrammarParser.prototype.scalarType = function() {

    var localctx = new ScalarTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, PascalGrammarParser.RULE_scalarType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 333;
        this.match(PascalGrammarParser.LPAREN);
        this.state = 334;
        this.identifierList();
        this.state = 335;
        this.match(PascalGrammarParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SubrangeTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_subrangeType;
    return this;
}

SubrangeTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubrangeTypeContext.prototype.constructor = SubrangeTypeContext;

SubrangeTypeContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

SubrangeTypeContext.prototype.DOTDOT = function() {
    return this.getToken(PascalGrammarParser.DOTDOT, 0);
};

SubrangeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterSubrangeType(this);
	}
};

SubrangeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitSubrangeType(this);
	}
};




PascalGrammarParser.SubrangeTypeContext = SubrangeTypeContext;

PascalGrammarParser.prototype.subrangeType = function() {

    var localctx = new SubrangeTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, PascalGrammarParser.RULE_subrangeType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 337;
        this.constant();
        this.state = 338;
        this.match(PascalGrammarParser.DOTDOT);
        this.state = 339;
        this.constant();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_typeIdentifier;
    return this;
}

TypeIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeIdentifierContext.prototype.constructor = TypeIdentifierContext;

TypeIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TypeIdentifierContext.prototype.CHAR = function() {
    return this.getToken(PascalGrammarParser.CHAR, 0);
};

TypeIdentifierContext.prototype.BOOLEAN = function() {
    return this.getToken(PascalGrammarParser.BOOLEAN, 0);
};

TypeIdentifierContext.prototype.INTEGER = function() {
    return this.getToken(PascalGrammarParser.INTEGER, 0);
};

TypeIdentifierContext.prototype.REAL = function() {
    return this.getToken(PascalGrammarParser.REAL, 0);
};

TypeIdentifierContext.prototype.STRING = function() {
    return this.getToken(PascalGrammarParser.STRING, 0);
};

TypeIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterTypeIdentifier(this);
	}
};

TypeIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitTypeIdentifier(this);
	}
};




PascalGrammarParser.TypeIdentifierContext = TypeIdentifierContext;

PascalGrammarParser.prototype.typeIdentifier = function() {

    var localctx = new TypeIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, PascalGrammarParser.RULE_typeIdentifier);
    var _la = 0; // Token type
    try {
        this.state = 343;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PascalGrammarParser.IDENT:
            this.enterOuterAlt(localctx, 1);
            this.state = 341;
            this.identifier();
            break;
        case PascalGrammarParser.BOOLEAN:
        case PascalGrammarParser.CHAR:
        case PascalGrammarParser.INTEGER:
        case PascalGrammarParser.REAL:
        case PascalGrammarParser.STRING:
            this.enterOuterAlt(localctx, 2);
            this.state = 342;
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PascalGrammarParser.BOOLEAN) | (1 << PascalGrammarParser.CHAR) | (1 << PascalGrammarParser.INTEGER) | (1 << PascalGrammarParser.REAL))) !== 0) || _la===PascalGrammarParser.STRING)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StructuredTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_structuredType;
    return this;
}

StructuredTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructuredTypeContext.prototype.constructor = StructuredTypeContext;

StructuredTypeContext.prototype.PACKED = function() {
    return this.getToken(PascalGrammarParser.PACKED, 0);
};

StructuredTypeContext.prototype.unpackedStructuredType = function() {
    return this.getTypedRuleContext(UnpackedStructuredTypeContext,0);
};

StructuredTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterStructuredType(this);
	}
};

StructuredTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitStructuredType(this);
	}
};




PascalGrammarParser.StructuredTypeContext = StructuredTypeContext;

PascalGrammarParser.prototype.structuredType = function() {

    var localctx = new StructuredTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, PascalGrammarParser.RULE_structuredType);
    try {
        this.state = 348;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PascalGrammarParser.PACKED:
            this.enterOuterAlt(localctx, 1);
            this.state = 345;
            this.match(PascalGrammarParser.PACKED);
            this.state = 346;
            this.unpackedStructuredType();
            break;
        case PascalGrammarParser.ARRAY:
        case PascalGrammarParser.FILE:
        case PascalGrammarParser.RECORD:
        case PascalGrammarParser.SET:
            this.enterOuterAlt(localctx, 2);
            this.state = 347;
            this.unpackedStructuredType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnpackedStructuredTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_unpackedStructuredType;
    return this;
}

UnpackedStructuredTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnpackedStructuredTypeContext.prototype.constructor = UnpackedStructuredTypeContext;

UnpackedStructuredTypeContext.prototype.arrayType = function() {
    return this.getTypedRuleContext(ArrayTypeContext,0);
};

UnpackedStructuredTypeContext.prototype.recordType = function() {
    return this.getTypedRuleContext(RecordTypeContext,0);
};

UnpackedStructuredTypeContext.prototype.setType = function() {
    return this.getTypedRuleContext(SetTypeContext,0);
};

UnpackedStructuredTypeContext.prototype.fileType = function() {
    return this.getTypedRuleContext(FileTypeContext,0);
};

UnpackedStructuredTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterUnpackedStructuredType(this);
	}
};

UnpackedStructuredTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitUnpackedStructuredType(this);
	}
};




PascalGrammarParser.UnpackedStructuredTypeContext = UnpackedStructuredTypeContext;

PascalGrammarParser.prototype.unpackedStructuredType = function() {

    var localctx = new UnpackedStructuredTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, PascalGrammarParser.RULE_unpackedStructuredType);
    try {
        this.state = 354;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PascalGrammarParser.ARRAY:
            this.enterOuterAlt(localctx, 1);
            this.state = 350;
            this.arrayType();
            break;
        case PascalGrammarParser.RECORD:
            this.enterOuterAlt(localctx, 2);
            this.state = 351;
            this.recordType();
            break;
        case PascalGrammarParser.SET:
            this.enterOuterAlt(localctx, 3);
            this.state = 352;
            this.setType();
            break;
        case PascalGrammarParser.FILE:
            this.enterOuterAlt(localctx, 4);
            this.state = 353;
            this.fileType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StringtypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_stringtype;
    return this;
}

StringtypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringtypeContext.prototype.constructor = StringtypeContext;

StringtypeContext.prototype.STRING = function() {
    return this.getToken(PascalGrammarParser.STRING, 0);
};

StringtypeContext.prototype.LBRACK = function() {
    return this.getToken(PascalGrammarParser.LBRACK, 0);
};

StringtypeContext.prototype.RBRACK = function() {
    return this.getToken(PascalGrammarParser.RBRACK, 0);
};

StringtypeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

StringtypeContext.prototype.unsignedNumber = function() {
    return this.getTypedRuleContext(UnsignedNumberContext,0);
};

StringtypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterStringtype(this);
	}
};

StringtypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitStringtype(this);
	}
};




PascalGrammarParser.StringtypeContext = StringtypeContext;

PascalGrammarParser.prototype.stringtype = function() {

    var localctx = new StringtypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, PascalGrammarParser.RULE_stringtype);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 356;
        this.match(PascalGrammarParser.STRING);
        this.state = 357;
        this.match(PascalGrammarParser.LBRACK);
        this.state = 360;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PascalGrammarParser.IDENT:
            this.state = 358;
            this.identifier();
            break;
        case PascalGrammarParser.NUM_INT:
        case PascalGrammarParser.NUM_REAL:
            this.state = 359;
            this.unsignedNumber();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 362;
        this.match(PascalGrammarParser.RBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_arrayType;
    return this;
}

ArrayTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayTypeContext.prototype.constructor = ArrayTypeContext;

ArrayTypeContext.prototype.ARRAY = function() {
    return this.getToken(PascalGrammarParser.ARRAY, 0);
};

ArrayTypeContext.prototype.LBRACK = function() {
    return this.getToken(PascalGrammarParser.LBRACK, 0);
};

ArrayTypeContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

ArrayTypeContext.prototype.RBRACK = function() {
    return this.getToken(PascalGrammarParser.RBRACK, 0);
};

ArrayTypeContext.prototype.OF = function() {
    return this.getToken(PascalGrammarParser.OF, 0);
};

ArrayTypeContext.prototype.componentType = function() {
    return this.getTypedRuleContext(ComponentTypeContext,0);
};

ArrayTypeContext.prototype.LBRACK2 = function() {
    return this.getToken(PascalGrammarParser.LBRACK2, 0);
};

ArrayTypeContext.prototype.RBRACK2 = function() {
    return this.getToken(PascalGrammarParser.RBRACK2, 0);
};

ArrayTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterArrayType(this);
	}
};

ArrayTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitArrayType(this);
	}
};




PascalGrammarParser.ArrayTypeContext = ArrayTypeContext;

PascalGrammarParser.prototype.arrayType = function() {

    var localctx = new ArrayTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, PascalGrammarParser.RULE_arrayType);
    try {
        this.state = 378;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 364;
            this.match(PascalGrammarParser.ARRAY);
            this.state = 365;
            this.match(PascalGrammarParser.LBRACK);
            this.state = 366;
            this.typeList();
            this.state = 367;
            this.match(PascalGrammarParser.RBRACK);
            this.state = 368;
            this.match(PascalGrammarParser.OF);
            this.state = 369;
            this.componentType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 371;
            this.match(PascalGrammarParser.ARRAY);
            this.state = 372;
            this.match(PascalGrammarParser.LBRACK2);
            this.state = 373;
            this.typeList();
            this.state = 374;
            this.match(PascalGrammarParser.RBRACK2);
            this.state = 375;
            this.match(PascalGrammarParser.OF);
            this.state = 376;
            this.componentType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_typeList;
    return this;
}

TypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeListContext.prototype.constructor = TypeListContext;

TypeListContext.prototype.indexType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexTypeContext);
    } else {
        return this.getTypedRuleContext(IndexTypeContext,i);
    }
};

TypeListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.COMMA);
    } else {
        return this.getToken(PascalGrammarParser.COMMA, i);
    }
};


TypeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterTypeList(this);
	}
};

TypeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitTypeList(this);
	}
};




PascalGrammarParser.TypeListContext = TypeListContext;

PascalGrammarParser.prototype.typeList = function() {

    var localctx = new TypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, PascalGrammarParser.RULE_typeList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 380;
        this.indexType();
        this.state = 385;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PascalGrammarParser.COMMA) {
            this.state = 381;
            this.match(PascalGrammarParser.COMMA);
            this.state = 382;
            this.indexType();
            this.state = 387;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_indexType;
    return this;
}

IndexTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexTypeContext.prototype.constructor = IndexTypeContext;

IndexTypeContext.prototype.simpleType = function() {
    return this.getTypedRuleContext(SimpleTypeContext,0);
};

IndexTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterIndexType(this);
	}
};

IndexTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitIndexType(this);
	}
};




PascalGrammarParser.IndexTypeContext = IndexTypeContext;

PascalGrammarParser.prototype.indexType = function() {

    var localctx = new IndexTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, PascalGrammarParser.RULE_indexType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 388;
        this.simpleType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_componentType;
    return this;
}

ComponentTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentTypeContext.prototype.constructor = ComponentTypeContext;

ComponentTypeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ComponentTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterComponentType(this);
	}
};

ComponentTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitComponentType(this);
	}
};




PascalGrammarParser.ComponentTypeContext = ComponentTypeContext;

PascalGrammarParser.prototype.componentType = function() {

    var localctx = new ComponentTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, PascalGrammarParser.RULE_componentType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 390;
        this.type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RecordTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_recordType;
    return this;
}

RecordTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RecordTypeContext.prototype.constructor = RecordTypeContext;

RecordTypeContext.prototype.RECORD = function() {
    return this.getToken(PascalGrammarParser.RECORD, 0);
};

RecordTypeContext.prototype.END = function() {
    return this.getToken(PascalGrammarParser.END, 0);
};

RecordTypeContext.prototype.fieldList = function() {
    return this.getTypedRuleContext(FieldListContext,0);
};

RecordTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterRecordType(this);
	}
};

RecordTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitRecordType(this);
	}
};




PascalGrammarParser.RecordTypeContext = RecordTypeContext;

PascalGrammarParser.prototype.recordType = function() {

    var localctx = new RecordTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, PascalGrammarParser.RULE_recordType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 392;
        this.match(PascalGrammarParser.RECORD);
        this.state = 394;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PascalGrammarParser.CASE || _la===PascalGrammarParser.IDENT) {
            this.state = 393;
            this.fieldList();
        }

        this.state = 396;
        this.match(PascalGrammarParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_fieldList;
    return this;
}

FieldListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldListContext.prototype.constructor = FieldListContext;

FieldListContext.prototype.fixedPart = function() {
    return this.getTypedRuleContext(FixedPartContext,0);
};

FieldListContext.prototype.SEMI = function() {
    return this.getToken(PascalGrammarParser.SEMI, 0);
};

FieldListContext.prototype.variantPart = function() {
    return this.getTypedRuleContext(VariantPartContext,0);
};

FieldListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterFieldList(this);
	}
};

FieldListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitFieldList(this);
	}
};




PascalGrammarParser.FieldListContext = FieldListContext;

PascalGrammarParser.prototype.fieldList = function() {

    var localctx = new FieldListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, PascalGrammarParser.RULE_fieldList);
    var _la = 0; // Token type
    try {
        this.state = 404;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PascalGrammarParser.IDENT:
            this.enterOuterAlt(localctx, 1);
            this.state = 398;
            this.fixedPart();
            this.state = 401;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PascalGrammarParser.SEMI) {
                this.state = 399;
                this.match(PascalGrammarParser.SEMI);
                this.state = 400;
                this.variantPart();
            }

            break;
        case PascalGrammarParser.CASE:
            this.enterOuterAlt(localctx, 2);
            this.state = 403;
            this.variantPart();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FixedPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_fixedPart;
    return this;
}

FixedPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FixedPartContext.prototype.constructor = FixedPartContext;

FixedPartContext.prototype.recordSection = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RecordSectionContext);
    } else {
        return this.getTypedRuleContext(RecordSectionContext,i);
    }
};

FixedPartContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.SEMI);
    } else {
        return this.getToken(PascalGrammarParser.SEMI, i);
    }
};


FixedPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterFixedPart(this);
	}
};

FixedPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitFixedPart(this);
	}
};




PascalGrammarParser.FixedPartContext = FixedPartContext;

PascalGrammarParser.prototype.fixedPart = function() {

    var localctx = new FixedPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, PascalGrammarParser.RULE_fixedPart);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 406;
        this.recordSection();
        this.state = 411;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 407;
                this.match(PascalGrammarParser.SEMI);
                this.state = 408;
                this.recordSection();
            }
            this.state = 413;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RecordSectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_recordSection;
    return this;
}

RecordSectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RecordSectionContext.prototype.constructor = RecordSectionContext;

RecordSectionContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

RecordSectionContext.prototype.COLON = function() {
    return this.getToken(PascalGrammarParser.COLON, 0);
};

RecordSectionContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

RecordSectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterRecordSection(this);
	}
};

RecordSectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitRecordSection(this);
	}
};




PascalGrammarParser.RecordSectionContext = RecordSectionContext;

PascalGrammarParser.prototype.recordSection = function() {

    var localctx = new RecordSectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, PascalGrammarParser.RULE_recordSection);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 414;
        this.identifierList();
        this.state = 415;
        this.match(PascalGrammarParser.COLON);
        this.state = 416;
        this.type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariantPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_variantPart;
    return this;
}

VariantPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariantPartContext.prototype.constructor = VariantPartContext;

VariantPartContext.prototype.CASE = function() {
    return this.getToken(PascalGrammarParser.CASE, 0);
};

VariantPartContext.prototype.tag = function() {
    return this.getTypedRuleContext(TagContext,0);
};

VariantPartContext.prototype.OF = function() {
    return this.getToken(PascalGrammarParser.OF, 0);
};

VariantPartContext.prototype.variant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariantContext);
    } else {
        return this.getTypedRuleContext(VariantContext,i);
    }
};

VariantPartContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.SEMI);
    } else {
        return this.getToken(PascalGrammarParser.SEMI, i);
    }
};


VariantPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterVariantPart(this);
	}
};

VariantPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitVariantPart(this);
	}
};




PascalGrammarParser.VariantPartContext = VariantPartContext;

PascalGrammarParser.prototype.variantPart = function() {

    var localctx = new VariantPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, PascalGrammarParser.RULE_variantPart);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 418;
        this.match(PascalGrammarParser.CASE);
        this.state = 419;
        this.tag();
        this.state = 420;
        this.match(PascalGrammarParser.OF);
        this.state = 421;
        this.variant();
        this.state = 426;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PascalGrammarParser.SEMI) {
            this.state = 422;
            this.match(PascalGrammarParser.SEMI);
            this.state = 423;
            this.variant();
            this.state = 428;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TagContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_tag;
    return this;
}

TagContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TagContext.prototype.constructor = TagContext;

TagContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TagContext.prototype.COLON = function() {
    return this.getToken(PascalGrammarParser.COLON, 0);
};

TagContext.prototype.typeIdentifier = function() {
    return this.getTypedRuleContext(TypeIdentifierContext,0);
};

TagContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterTag(this);
	}
};

TagContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitTag(this);
	}
};




PascalGrammarParser.TagContext = TagContext;

PascalGrammarParser.prototype.tag = function() {

    var localctx = new TagContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, PascalGrammarParser.RULE_tag);
    try {
        this.state = 434;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 429;
            this.identifier();
            this.state = 430;
            this.match(PascalGrammarParser.COLON);
            this.state = 431;
            this.typeIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 433;
            this.typeIdentifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_variant;
    return this;
}

VariantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariantContext.prototype.constructor = VariantContext;

VariantContext.prototype.constList = function() {
    return this.getTypedRuleContext(ConstListContext,0);
};

VariantContext.prototype.COLON = function() {
    return this.getToken(PascalGrammarParser.COLON, 0);
};

VariantContext.prototype.LPAREN = function() {
    return this.getToken(PascalGrammarParser.LPAREN, 0);
};

VariantContext.prototype.fieldList = function() {
    return this.getTypedRuleContext(FieldListContext,0);
};

VariantContext.prototype.RPAREN = function() {
    return this.getToken(PascalGrammarParser.RPAREN, 0);
};

VariantContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterVariant(this);
	}
};

VariantContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitVariant(this);
	}
};




PascalGrammarParser.VariantContext = VariantContext;

PascalGrammarParser.prototype.variant = function() {

    var localctx = new VariantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, PascalGrammarParser.RULE_variant);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 436;
        this.constList();
        this.state = 437;
        this.match(PascalGrammarParser.COLON);
        this.state = 438;
        this.match(PascalGrammarParser.LPAREN);
        this.state = 439;
        this.fieldList();
        this.state = 440;
        this.match(PascalGrammarParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_setType;
    return this;
}

SetTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetTypeContext.prototype.constructor = SetTypeContext;

SetTypeContext.prototype.SET = function() {
    return this.getToken(PascalGrammarParser.SET, 0);
};

SetTypeContext.prototype.OF = function() {
    return this.getToken(PascalGrammarParser.OF, 0);
};

SetTypeContext.prototype.baseType = function() {
    return this.getTypedRuleContext(BaseTypeContext,0);
};

SetTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterSetType(this);
	}
};

SetTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitSetType(this);
	}
};




PascalGrammarParser.SetTypeContext = SetTypeContext;

PascalGrammarParser.prototype.setType = function() {

    var localctx = new SetTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, PascalGrammarParser.RULE_setType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 442;
        this.match(PascalGrammarParser.SET);
        this.state = 443;
        this.match(PascalGrammarParser.OF);
        this.state = 444;
        this.baseType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BaseTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_baseType;
    return this;
}

BaseTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseTypeContext.prototype.constructor = BaseTypeContext;

BaseTypeContext.prototype.simpleType = function() {
    return this.getTypedRuleContext(SimpleTypeContext,0);
};

BaseTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterBaseType(this);
	}
};

BaseTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitBaseType(this);
	}
};




PascalGrammarParser.BaseTypeContext = BaseTypeContext;

PascalGrammarParser.prototype.baseType = function() {

    var localctx = new BaseTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, PascalGrammarParser.RULE_baseType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 446;
        this.simpleType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FileTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_fileType;
    return this;
}

FileTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FileTypeContext.prototype.constructor = FileTypeContext;

FileTypeContext.prototype.FILE = function() {
    return this.getToken(PascalGrammarParser.FILE, 0);
};

FileTypeContext.prototype.OF = function() {
    return this.getToken(PascalGrammarParser.OF, 0);
};

FileTypeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

FileTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterFileType(this);
	}
};

FileTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitFileType(this);
	}
};




PascalGrammarParser.FileTypeContext = FileTypeContext;

PascalGrammarParser.prototype.fileType = function() {

    var localctx = new FileTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, PascalGrammarParser.RULE_fileType);
    try {
        this.state = 452;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 448;
            this.match(PascalGrammarParser.FILE);
            this.state = 449;
            this.match(PascalGrammarParser.OF);
            this.state = 450;
            this.type();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 451;
            this.match(PascalGrammarParser.FILE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PointerTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_pointerType;
    return this;
}

PointerTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PointerTypeContext.prototype.constructor = PointerTypeContext;

PointerTypeContext.prototype.POINTER = function() {
    return this.getToken(PascalGrammarParser.POINTER, 0);
};

PointerTypeContext.prototype.typeIdentifier = function() {
    return this.getTypedRuleContext(TypeIdentifierContext,0);
};

PointerTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterPointerType(this);
	}
};

PointerTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitPointerType(this);
	}
};




PascalGrammarParser.PointerTypeContext = PointerTypeContext;

PascalGrammarParser.prototype.pointerType = function() {

    var localctx = new PointerTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, PascalGrammarParser.RULE_pointerType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 454;
        this.match(PascalGrammarParser.POINTER);
        this.state = 455;
        this.typeIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclarationPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_variableDeclarationPart;
    return this;
}

VariableDeclarationPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationPartContext.prototype.constructor = VariableDeclarationPartContext;

VariableDeclarationPartContext.prototype.VAR = function() {
    return this.getToken(PascalGrammarParser.VAR, 0);
};

VariableDeclarationPartContext.prototype.variableDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclarationContext);
    } else {
        return this.getTypedRuleContext(VariableDeclarationContext,i);
    }
};

VariableDeclarationPartContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.SEMI);
    } else {
        return this.getToken(PascalGrammarParser.SEMI, i);
    }
};


VariableDeclarationPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterVariableDeclarationPart(this);
	}
};

VariableDeclarationPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitVariableDeclarationPart(this);
	}
};




PascalGrammarParser.VariableDeclarationPartContext = VariableDeclarationPartContext;

PascalGrammarParser.prototype.variableDeclarationPart = function() {

    var localctx = new VariableDeclarationPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, PascalGrammarParser.RULE_variableDeclarationPart);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 457;
        this.match(PascalGrammarParser.VAR);
        this.state = 458;
        this.variableDeclaration();
        this.state = 463;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 459;
                this.match(PascalGrammarParser.SEMI);
                this.state = 460;
                this.variableDeclaration();
            }
            this.state = 465;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
        }

        this.state = 466;
        this.match(PascalGrammarParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_variableDeclaration;
    return this;
}

VariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationContext.prototype.constructor = VariableDeclarationContext;

VariableDeclarationContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

VariableDeclarationContext.prototype.COLON = function() {
    return this.getToken(PascalGrammarParser.COLON, 0);
};

VariableDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

VariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterVariableDeclaration(this);
	}
};

VariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitVariableDeclaration(this);
	}
};




PascalGrammarParser.VariableDeclarationContext = VariableDeclarationContext;

PascalGrammarParser.prototype.variableDeclaration = function() {

    var localctx = new VariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, PascalGrammarParser.RULE_variableDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 468;
        this.identifierList();
        this.state = 469;
        this.match(PascalGrammarParser.COLON);
        this.state = 470;
        this.type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProcedureAndFunctionDeclarationPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_procedureAndFunctionDeclarationPart;
    return this;
}

ProcedureAndFunctionDeclarationPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureAndFunctionDeclarationPartContext.prototype.constructor = ProcedureAndFunctionDeclarationPartContext;

ProcedureAndFunctionDeclarationPartContext.prototype.procedureOrFunctionDeclaration = function() {
    return this.getTypedRuleContext(ProcedureOrFunctionDeclarationContext,0);
};

ProcedureAndFunctionDeclarationPartContext.prototype.SEMI = function() {
    return this.getToken(PascalGrammarParser.SEMI, 0);
};

ProcedureAndFunctionDeclarationPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterProcedureAndFunctionDeclarationPart(this);
	}
};

ProcedureAndFunctionDeclarationPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitProcedureAndFunctionDeclarationPart(this);
	}
};




PascalGrammarParser.ProcedureAndFunctionDeclarationPartContext = ProcedureAndFunctionDeclarationPartContext;

PascalGrammarParser.prototype.procedureAndFunctionDeclarationPart = function() {

    var localctx = new ProcedureAndFunctionDeclarationPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, PascalGrammarParser.RULE_procedureAndFunctionDeclarationPart);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 472;
        this.procedureOrFunctionDeclaration();
        this.state = 473;
        this.match(PascalGrammarParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProcedureOrFunctionDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_procedureOrFunctionDeclaration;
    return this;
}

ProcedureOrFunctionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureOrFunctionDeclarationContext.prototype.constructor = ProcedureOrFunctionDeclarationContext;

ProcedureOrFunctionDeclarationContext.prototype.procedureDeclaration = function() {
    return this.getTypedRuleContext(ProcedureDeclarationContext,0);
};

ProcedureOrFunctionDeclarationContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

ProcedureOrFunctionDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterProcedureOrFunctionDeclaration(this);
	}
};

ProcedureOrFunctionDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitProcedureOrFunctionDeclaration(this);
	}
};




PascalGrammarParser.ProcedureOrFunctionDeclarationContext = ProcedureOrFunctionDeclarationContext;

PascalGrammarParser.prototype.procedureOrFunctionDeclaration = function() {

    var localctx = new ProcedureOrFunctionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, PascalGrammarParser.RULE_procedureOrFunctionDeclaration);
    try {
        this.state = 477;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PascalGrammarParser.PROCEDURE:
            this.enterOuterAlt(localctx, 1);
            this.state = 475;
            this.procedureDeclaration();
            break;
        case PascalGrammarParser.FUNCTION:
            this.enterOuterAlt(localctx, 2);
            this.state = 476;
            this.functionDeclaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProcedureDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_procedureDeclaration;
    return this;
}

ProcedureDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureDeclarationContext.prototype.constructor = ProcedureDeclarationContext;

ProcedureDeclarationContext.prototype.PROCEDURE = function() {
    return this.getToken(PascalGrammarParser.PROCEDURE, 0);
};

ProcedureDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ProcedureDeclarationContext.prototype.SEMI = function() {
    return this.getToken(PascalGrammarParser.SEMI, 0);
};

ProcedureDeclarationContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ProcedureDeclarationContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

ProcedureDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterProcedureDeclaration(this);
	}
};

ProcedureDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitProcedureDeclaration(this);
	}
};




PascalGrammarParser.ProcedureDeclarationContext = ProcedureDeclarationContext;

PascalGrammarParser.prototype.procedureDeclaration = function() {

    var localctx = new ProcedureDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, PascalGrammarParser.RULE_procedureDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 479;
        this.match(PascalGrammarParser.PROCEDURE);
        this.state = 480;
        this.identifier();
        this.state = 482;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PascalGrammarParser.LPAREN) {
            this.state = 481;
            this.formalParameterList();
        }

        this.state = 484;
        this.match(PascalGrammarParser.SEMI);
        this.state = 485;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FormalParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_formalParameterList;
    return this;
}

FormalParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterListContext.prototype.constructor = FormalParameterListContext;

FormalParameterListContext.prototype.LPAREN = function() {
    return this.getToken(PascalGrammarParser.LPAREN, 0);
};

FormalParameterListContext.prototype.RPAREN = function() {
    return this.getToken(PascalGrammarParser.RPAREN, 0);
};

FormalParameterListContext.prototype.formalParameterSection = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormalParameterSectionContext);
    } else {
        return this.getTypedRuleContext(FormalParameterSectionContext,i);
    }
};

FormalParameterListContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.SEMI);
    } else {
        return this.getToken(PascalGrammarParser.SEMI, i);
    }
};


FormalParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterFormalParameterList(this);
	}
};

FormalParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitFormalParameterList(this);
	}
};




PascalGrammarParser.FormalParameterListContext = FormalParameterListContext;

PascalGrammarParser.prototype.formalParameterList = function() {

    var localctx = new FormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, PascalGrammarParser.RULE_formalParameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 487;
        this.match(PascalGrammarParser.LPAREN);
        this.state = 496;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 16)) & ~0x1f) == 0 && ((1 << (_la - 16)) & ((1 << (PascalGrammarParser.FUNCTION - 16)) | (1 << (PascalGrammarParser.PROCEDURE - 16)) | (1 << (PascalGrammarParser.VAR - 16)))) !== 0) || _la===PascalGrammarParser.IDENT) {
            this.state = 488;
            this.formalParameterSection();
            this.state = 493;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PascalGrammarParser.SEMI) {
                this.state = 489;
                this.match(PascalGrammarParser.SEMI);
                this.state = 490;
                this.formalParameterSection();
                this.state = 495;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 498;
        this.match(PascalGrammarParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FormalParameterSectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_formalParameterSection;
    return this;
}

FormalParameterSectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterSectionContext.prototype.constructor = FormalParameterSectionContext;

FormalParameterSectionContext.prototype.parameterGroup = function() {
    return this.getTypedRuleContext(ParameterGroupContext,0);
};

FormalParameterSectionContext.prototype.VAR = function() {
    return this.getToken(PascalGrammarParser.VAR, 0);
};

FormalParameterSectionContext.prototype.FUNCTION = function() {
    return this.getToken(PascalGrammarParser.FUNCTION, 0);
};

FormalParameterSectionContext.prototype.PROCEDURE = function() {
    return this.getToken(PascalGrammarParser.PROCEDURE, 0);
};

FormalParameterSectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterFormalParameterSection(this);
	}
};

FormalParameterSectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitFormalParameterSection(this);
	}
};




PascalGrammarParser.FormalParameterSectionContext = FormalParameterSectionContext;

PascalGrammarParser.prototype.formalParameterSection = function() {

    var localctx = new FormalParameterSectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, PascalGrammarParser.RULE_formalParameterSection);
    try {
        this.state = 507;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PascalGrammarParser.IDENT:
            this.enterOuterAlt(localctx, 1);
            this.state = 500;
            this.parameterGroup();
            break;
        case PascalGrammarParser.VAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 501;
            this.match(PascalGrammarParser.VAR);
            this.state = 502;
            this.parameterGroup();
            break;
        case PascalGrammarParser.FUNCTION:
            this.enterOuterAlt(localctx, 3);
            this.state = 503;
            this.match(PascalGrammarParser.FUNCTION);
            this.state = 504;
            this.parameterGroup();
            break;
        case PascalGrammarParser.PROCEDURE:
            this.enterOuterAlt(localctx, 4);
            this.state = 505;
            this.match(PascalGrammarParser.PROCEDURE);
            this.state = 506;
            this.parameterGroup();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_parameterGroup;
    return this;
}

ParameterGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterGroupContext.prototype.constructor = ParameterGroupContext;

ParameterGroupContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

ParameterGroupContext.prototype.COLON = function() {
    return this.getToken(PascalGrammarParser.COLON, 0);
};

ParameterGroupContext.prototype.typeIdentifier = function() {
    return this.getTypedRuleContext(TypeIdentifierContext,0);
};

ParameterGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterParameterGroup(this);
	}
};

ParameterGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitParameterGroup(this);
	}
};




PascalGrammarParser.ParameterGroupContext = ParameterGroupContext;

PascalGrammarParser.prototype.parameterGroup = function() {

    var localctx = new ParameterGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, PascalGrammarParser.RULE_parameterGroup);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 509;
        this.identifierList();
        this.state = 510;
        this.match(PascalGrammarParser.COLON);
        this.state = 511;
        this.typeIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_identifierList;
    return this;
}

IdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierListContext.prototype.constructor = IdentifierListContext;

IdentifierListContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

IdentifierListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.COMMA);
    } else {
        return this.getToken(PascalGrammarParser.COMMA, i);
    }
};


IdentifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterIdentifierList(this);
	}
};

IdentifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitIdentifierList(this);
	}
};




PascalGrammarParser.IdentifierListContext = IdentifierListContext;

PascalGrammarParser.prototype.identifierList = function() {

    var localctx = new IdentifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, PascalGrammarParser.RULE_identifierList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 513;
        this.identifier();
        this.state = 518;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,34,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 514;
                this.match(PascalGrammarParser.COMMA);
                this.state = 515;
                this.identifier();
            }
            this.state = 520;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,34,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_constList;
    return this;
}

ConstListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstListContext.prototype.constructor = ConstListContext;

ConstListContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

ConstListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.COMMA);
    } else {
        return this.getToken(PascalGrammarParser.COMMA, i);
    }
};


ConstListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterConstList(this);
	}
};

ConstListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitConstList(this);
	}
};




PascalGrammarParser.ConstListContext = ConstListContext;

PascalGrammarParser.prototype.constList = function() {

    var localctx = new ConstListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, PascalGrammarParser.RULE_constList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 521;
        this.constant();
        this.state = 526;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PascalGrammarParser.COMMA) {
            this.state = 522;
            this.match(PascalGrammarParser.COMMA);
            this.state = 523;
            this.constant();
            this.state = 528;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_functionDeclaration;
    return this;
}

FunctionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDeclarationContext.prototype.constructor = FunctionDeclarationContext;

FunctionDeclarationContext.prototype.FUNCTION = function() {
    return this.getToken(PascalGrammarParser.FUNCTION, 0);
};

FunctionDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FunctionDeclarationContext.prototype.COLON = function() {
    return this.getToken(PascalGrammarParser.COLON, 0);
};

FunctionDeclarationContext.prototype.resultType = function() {
    return this.getTypedRuleContext(ResultTypeContext,0);
};

FunctionDeclarationContext.prototype.SEMI = function() {
    return this.getToken(PascalGrammarParser.SEMI, 0);
};

FunctionDeclarationContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FunctionDeclarationContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

FunctionDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterFunctionDeclaration(this);
	}
};

FunctionDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitFunctionDeclaration(this);
	}
};




PascalGrammarParser.FunctionDeclarationContext = FunctionDeclarationContext;

PascalGrammarParser.prototype.functionDeclaration = function() {

    var localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, PascalGrammarParser.RULE_functionDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 529;
        this.match(PascalGrammarParser.FUNCTION);
        this.state = 530;
        this.identifier();
        this.state = 532;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PascalGrammarParser.LPAREN) {
            this.state = 531;
            this.formalParameterList();
        }

        this.state = 534;
        this.match(PascalGrammarParser.COLON);
        this.state = 535;
        this.resultType();
        this.state = 536;
        this.match(PascalGrammarParser.SEMI);
        this.state = 537;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ResultTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_resultType;
    return this;
}

ResultTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResultTypeContext.prototype.constructor = ResultTypeContext;

ResultTypeContext.prototype.typeIdentifier = function() {
    return this.getTypedRuleContext(TypeIdentifierContext,0);
};

ResultTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterResultType(this);
	}
};

ResultTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitResultType(this);
	}
};




PascalGrammarParser.ResultTypeContext = ResultTypeContext;

PascalGrammarParser.prototype.resultType = function() {

    var localctx = new ResultTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, PascalGrammarParser.RULE_resultType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 539;
        this.typeIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.label = function() {
    return this.getTypedRuleContext(LabelContext,0);
};

StatementContext.prototype.COLON = function() {
    return this.getToken(PascalGrammarParser.COLON, 0);
};

StatementContext.prototype.unlabelledStatement = function() {
    return this.getTypedRuleContext(UnlabelledStatementContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitStatement(this);
	}
};




PascalGrammarParser.StatementContext = StatementContext;

PascalGrammarParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, PascalGrammarParser.RULE_statement);
    try {
        this.state = 546;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PascalGrammarParser.NUM_INT:
            this.enterOuterAlt(localctx, 1);
            this.state = 541;
            this.label();
            this.state = 542;
            this.match(PascalGrammarParser.COLON);
            this.state = 543;
            this.unlabelledStatement();
            break;
        case PascalGrammarParser.BEGIN:
        case PascalGrammarParser.CASE:
        case PascalGrammarParser.ELSE:
        case PascalGrammarParser.END:
        case PascalGrammarParser.FOR:
        case PascalGrammarParser.GOTO:
        case PascalGrammarParser.IF:
        case PascalGrammarParser.REPEAT:
        case PascalGrammarParser.UNTIL:
        case PascalGrammarParser.WHILE:
        case PascalGrammarParser.WITH:
        case PascalGrammarParser.SEMI:
        case PascalGrammarParser.AT:
        case PascalGrammarParser.WRITE:
        case PascalGrammarParser.READ:
        case PascalGrammarParser.IDENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 545;
            this.unlabelledStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnlabelledStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_unlabelledStatement;
    return this;
}

UnlabelledStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnlabelledStatementContext.prototype.constructor = UnlabelledStatementContext;

UnlabelledStatementContext.prototype.simpleStatement = function() {
    return this.getTypedRuleContext(SimpleStatementContext,0);
};

UnlabelledStatementContext.prototype.structuredStatement = function() {
    return this.getTypedRuleContext(StructuredStatementContext,0);
};

UnlabelledStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterUnlabelledStatement(this);
	}
};

UnlabelledStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitUnlabelledStatement(this);
	}
};




PascalGrammarParser.UnlabelledStatementContext = UnlabelledStatementContext;

PascalGrammarParser.prototype.unlabelledStatement = function() {

    var localctx = new UnlabelledStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, PascalGrammarParser.RULE_unlabelledStatement);
    try {
        this.state = 550;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PascalGrammarParser.ELSE:
        case PascalGrammarParser.END:
        case PascalGrammarParser.GOTO:
        case PascalGrammarParser.UNTIL:
        case PascalGrammarParser.SEMI:
        case PascalGrammarParser.AT:
        case PascalGrammarParser.WRITE:
        case PascalGrammarParser.READ:
        case PascalGrammarParser.IDENT:
            this.enterOuterAlt(localctx, 1);
            this.state = 548;
            this.simpleStatement();
            break;
        case PascalGrammarParser.BEGIN:
        case PascalGrammarParser.CASE:
        case PascalGrammarParser.FOR:
        case PascalGrammarParser.IF:
        case PascalGrammarParser.REPEAT:
        case PascalGrammarParser.WHILE:
        case PascalGrammarParser.WITH:
            this.enterOuterAlt(localctx, 2);
            this.state = 549;
            this.structuredStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpleStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_simpleStatement;
    return this;
}

SimpleStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleStatementContext.prototype.constructor = SimpleStatementContext;

SimpleStatementContext.prototype.assignmentStatement = function() {
    return this.getTypedRuleContext(AssignmentStatementContext,0);
};

SimpleStatementContext.prototype.procedureStatement = function() {
    return this.getTypedRuleContext(ProcedureStatementContext,0);
};

SimpleStatementContext.prototype.gotoStatement = function() {
    return this.getTypedRuleContext(GotoStatementContext,0);
};

SimpleStatementContext.prototype.emptyStatement = function() {
    return this.getTypedRuleContext(EmptyStatementContext,0);
};

SimpleStatementContext.prototype.ioStatement = function() {
    return this.getTypedRuleContext(IoStatementContext,0);
};

SimpleStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterSimpleStatement(this);
	}
};

SimpleStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitSimpleStatement(this);
	}
};




PascalGrammarParser.SimpleStatementContext = SimpleStatementContext;

PascalGrammarParser.prototype.simpleStatement = function() {

    var localctx = new SimpleStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, PascalGrammarParser.RULE_simpleStatement);
    try {
        this.state = 557;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 552;
            this.assignmentStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 553;
            this.procedureStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 554;
            this.gotoStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 555;
            this.emptyStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 556;
            this.ioStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IoStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_ioStatement;
    return this;
}

IoStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IoStatementContext.prototype.constructor = IoStatementContext;

IoStatementContext.prototype.WRITE = function() {
    return this.getToken(PascalGrammarParser.WRITE, 0);
};

IoStatementContext.prototype.LPAREN = function() {
    return this.getToken(PascalGrammarParser.LPAREN, 0);
};

IoStatementContext.prototype.RPAREN = function() {
    return this.getToken(PascalGrammarParser.RPAREN, 0);
};

IoStatementContext.prototype.string = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StringContext);
    } else {
        return this.getTypedRuleContext(StringContext,i);
    }
};

IoStatementContext.prototype.identifierList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierListContext);
    } else {
        return this.getTypedRuleContext(IdentifierListContext,i);
    }
};

IoStatementContext.prototype.procedureStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProcedureStatementContext);
    } else {
        return this.getTypedRuleContext(ProcedureStatementContext,i);
    }
};

IoStatementContext.prototype.bool = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BoolContext);
    } else {
        return this.getTypedRuleContext(BoolContext,i);
    }
};

IoStatementContext.prototype.NUM_INT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.NUM_INT);
    } else {
        return this.getToken(PascalGrammarParser.NUM_INT, i);
    }
};


IoStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.COMMA);
    } else {
        return this.getToken(PascalGrammarParser.COMMA, i);
    }
};


IoStatementContext.prototype.PLUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.PLUS);
    } else {
        return this.getToken(PascalGrammarParser.PLUS, i);
    }
};


IoStatementContext.prototype.READ = function() {
    return this.getToken(PascalGrammarParser.READ, 0);
};

IoStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterIoStatement(this);
	}
};

IoStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitIoStatement(this);
	}
};




PascalGrammarParser.IoStatementContext = IoStatementContext;

PascalGrammarParser.prototype.ioStatement = function() {

    var localctx = new IoStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, PascalGrammarParser.RULE_ioStatement);
    var _la = 0; // Token type
    try {
        this.state = 584;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PascalGrammarParser.WRITE:
            this.enterOuterAlt(localctx, 1);
            this.state = 559;
            this.match(PascalGrammarParser.WRITE);
            this.state = 560;
            this.match(PascalGrammarParser.LPAREN);
            this.state = 574;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (PascalGrammarParser.PLUS - 41)) | (1 << (PascalGrammarParser.COMMA - 41)) | (1 << (PascalGrammarParser.TRUE - 41)))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (PascalGrammarParser.FALSE - 73)) | (1 << (PascalGrammarParser.IDENT - 73)) | (1 << (PascalGrammarParser.STRING_LITERAL - 73)) | (1 << (PascalGrammarParser.NUM_INT - 73)))) !== 0)) {
                this.state = 572;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 562;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===PascalGrammarParser.PLUS || _la===PascalGrammarParser.COMMA) {
                        this.state = 561;
                        _la = this._input.LA(1);
                        if(!(_la===PascalGrammarParser.PLUS || _la===PascalGrammarParser.COMMA)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }

                    this.state = 564;
                    this.string();
                    this.state = 566;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
                    if(la_===1) {
                        this.state = 565;
                        _la = this._input.LA(1);
                        if(!(_la===PascalGrammarParser.PLUS || _la===PascalGrammarParser.COMMA)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }

                    }
                    break;

                case 2:
                    this.state = 568;
                    this.identifierList();
                    break;

                case 3:
                    this.state = 569;
                    this.procedureStatement();
                    break;

                case 4:
                    this.state = 570;
                    this.bool();
                    break;

                case 5:
                    this.state = 571;
                    this.match(PascalGrammarParser.NUM_INT);
                    break;

                }
                this.state = 576;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 577;
            this.match(PascalGrammarParser.RPAREN);
            break;
        case PascalGrammarParser.READ:
            this.enterOuterAlt(localctx, 2);
            this.state = 578;
            this.match(PascalGrammarParser.READ);
            this.state = 579;
            this.match(PascalGrammarParser.LPAREN);
            this.state = 581;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PascalGrammarParser.IDENT) {
                this.state = 580;
                this.identifierList();
            }

            this.state = 583;
            this.match(PascalGrammarParser.RPAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_assignmentStatement;
    return this;
}

AssignmentStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentStatementContext.prototype.constructor = AssignmentStatementContext;

AssignmentStatementContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

AssignmentStatementContext.prototype.ASSIGN = function() {
    return this.getToken(PascalGrammarParser.ASSIGN, 0);
};

AssignmentStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

AssignmentStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterAssignmentStatement(this);
	}
};

AssignmentStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitAssignmentStatement(this);
	}
};




PascalGrammarParser.AssignmentStatementContext = AssignmentStatementContext;

PascalGrammarParser.prototype.assignmentStatement = function() {

    var localctx = new AssignmentStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, PascalGrammarParser.RULE_assignmentStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 586;
        this.variable();
        this.state = 587;
        this.match(PascalGrammarParser.ASSIGN);
        this.state = 588;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_variable;
    return this;
}

VariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableContext.prototype.constructor = VariableContext;

VariableContext.prototype.AT = function() {
    return this.getToken(PascalGrammarParser.AT, 0);
};

VariableContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

VariableContext.prototype.LBRACK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.LBRACK);
    } else {
        return this.getToken(PascalGrammarParser.LBRACK, i);
    }
};


VariableContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

VariableContext.prototype.RBRACK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.RBRACK);
    } else {
        return this.getToken(PascalGrammarParser.RBRACK, i);
    }
};


VariableContext.prototype.LBRACK2 = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.LBRACK2);
    } else {
        return this.getToken(PascalGrammarParser.LBRACK2, i);
    }
};


VariableContext.prototype.RBRACK2 = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.RBRACK2);
    } else {
        return this.getToken(PascalGrammarParser.RBRACK2, i);
    }
};


VariableContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.DOT);
    } else {
        return this.getToken(PascalGrammarParser.DOT, i);
    }
};


VariableContext.prototype.POINTER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.POINTER);
    } else {
        return this.getToken(PascalGrammarParser.POINTER, i);
    }
};


VariableContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.COMMA);
    } else {
        return this.getToken(PascalGrammarParser.COMMA, i);
    }
};


VariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterVariable(this);
	}
};

VariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitVariable(this);
	}
};




PascalGrammarParser.VariableContext = VariableContext;

PascalGrammarParser.prototype.variable = function() {

    var localctx = new VariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, PascalGrammarParser.RULE_variable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 593;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PascalGrammarParser.AT:
            this.state = 590;
            this.match(PascalGrammarParser.AT);
            this.state = 591;
            this.identifier();
            break;
        case PascalGrammarParser.IDENT:
            this.state = 592;
            this.identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 622;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (PascalGrammarParser.LBRACK - 57)) | (1 << (PascalGrammarParser.LBRACK2 - 57)) | (1 << (PascalGrammarParser.POINTER - 57)) | (1 << (PascalGrammarParser.DOT - 57)))) !== 0)) {
            this.state = 620;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PascalGrammarParser.LBRACK:
                this.state = 595;
                this.match(PascalGrammarParser.LBRACK);
                this.state = 596;
                this.expression();
                this.state = 601;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===PascalGrammarParser.COMMA) {
                    this.state = 597;
                    this.match(PascalGrammarParser.COMMA);
                    this.state = 598;
                    this.expression();
                    this.state = 603;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 604;
                this.match(PascalGrammarParser.RBRACK);
                break;
            case PascalGrammarParser.LBRACK2:
                this.state = 606;
                this.match(PascalGrammarParser.LBRACK2);
                this.state = 607;
                this.expression();
                this.state = 612;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===PascalGrammarParser.COMMA) {
                    this.state = 608;
                    this.match(PascalGrammarParser.COMMA);
                    this.state = 609;
                    this.expression();
                    this.state = 614;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 615;
                this.match(PascalGrammarParser.RBRACK2);
                break;
            case PascalGrammarParser.DOT:
                this.state = 617;
                this.match(PascalGrammarParser.DOT);
                this.state = 618;
                this.identifier();
                break;
            case PascalGrammarParser.POINTER:
                this.state = 619;
                this.match(PascalGrammarParser.POINTER);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 624;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.simpleExpression = function() {
    return this.getTypedRuleContext(SimpleExpressionContext,0);
};

ExpressionContext.prototype.relationaloperator = function() {
    return this.getTypedRuleContext(RelationaloperatorContext,0);
};

ExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitExpression(this);
	}
};




PascalGrammarParser.ExpressionContext = ExpressionContext;

PascalGrammarParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, PascalGrammarParser.RULE_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 625;
        this.simpleExpression();
        this.state = 629;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PascalGrammarParser.IN || ((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (PascalGrammarParser.EQUAL - 49)) | (1 << (PascalGrammarParser.NOT_EQUAL - 49)) | (1 << (PascalGrammarParser.LT - 49)) | (1 << (PascalGrammarParser.LE - 49)) | (1 << (PascalGrammarParser.GE - 49)) | (1 << (PascalGrammarParser.GT - 49)))) !== 0)) {
            this.state = 626;
            this.relationaloperator();
            this.state = 627;
            this.expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RelationaloperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_relationaloperator;
    return this;
}

RelationaloperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationaloperatorContext.prototype.constructor = RelationaloperatorContext;

RelationaloperatorContext.prototype.EQUAL = function() {
    return this.getToken(PascalGrammarParser.EQUAL, 0);
};

RelationaloperatorContext.prototype.NOT_EQUAL = function() {
    return this.getToken(PascalGrammarParser.NOT_EQUAL, 0);
};

RelationaloperatorContext.prototype.LT = function() {
    return this.getToken(PascalGrammarParser.LT, 0);
};

RelationaloperatorContext.prototype.LE = function() {
    return this.getToken(PascalGrammarParser.LE, 0);
};

RelationaloperatorContext.prototype.GE = function() {
    return this.getToken(PascalGrammarParser.GE, 0);
};

RelationaloperatorContext.prototype.GT = function() {
    return this.getToken(PascalGrammarParser.GT, 0);
};

RelationaloperatorContext.prototype.IN = function() {
    return this.getToken(PascalGrammarParser.IN, 0);
};

RelationaloperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterRelationaloperator(this);
	}
};

RelationaloperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitRelationaloperator(this);
	}
};




PascalGrammarParser.RelationaloperatorContext = RelationaloperatorContext;

PascalGrammarParser.prototype.relationaloperator = function() {

    var localctx = new RelationaloperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, PascalGrammarParser.RULE_relationaloperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 631;
        _la = this._input.LA(1);
        if(!(_la===PascalGrammarParser.IN || ((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (PascalGrammarParser.EQUAL - 49)) | (1 << (PascalGrammarParser.NOT_EQUAL - 49)) | (1 << (PascalGrammarParser.LT - 49)) | (1 << (PascalGrammarParser.LE - 49)) | (1 << (PascalGrammarParser.GE - 49)) | (1 << (PascalGrammarParser.GT - 49)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpleExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_simpleExpression;
    return this;
}

SimpleExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleExpressionContext.prototype.constructor = SimpleExpressionContext;

SimpleExpressionContext.prototype.term = function() {
    return this.getTypedRuleContext(TermContext,0);
};

SimpleExpressionContext.prototype.additiveoperator = function() {
    return this.getTypedRuleContext(AdditiveoperatorContext,0);
};

SimpleExpressionContext.prototype.simpleExpression = function() {
    return this.getTypedRuleContext(SimpleExpressionContext,0);
};

SimpleExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterSimpleExpression(this);
	}
};

SimpleExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitSimpleExpression(this);
	}
};




PascalGrammarParser.SimpleExpressionContext = SimpleExpressionContext;

PascalGrammarParser.prototype.simpleExpression = function() {

    var localctx = new SimpleExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, PascalGrammarParser.RULE_simpleExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 633;
        this.term();
        this.state = 637;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 26)) & ~0x1f) == 0 && ((1 << (_la - 26)) & ((1 << (PascalGrammarParser.OR - 26)) | (1 << (PascalGrammarParser.PLUS - 26)) | (1 << (PascalGrammarParser.MINUS - 26)))) !== 0)) {
            this.state = 634;
            this.additiveoperator();
            this.state = 635;
            this.simpleExpression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AdditiveoperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_additiveoperator;
    return this;
}

AdditiveoperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdditiveoperatorContext.prototype.constructor = AdditiveoperatorContext;

AdditiveoperatorContext.prototype.PLUS = function() {
    return this.getToken(PascalGrammarParser.PLUS, 0);
};

AdditiveoperatorContext.prototype.MINUS = function() {
    return this.getToken(PascalGrammarParser.MINUS, 0);
};

AdditiveoperatorContext.prototype.OR = function() {
    return this.getToken(PascalGrammarParser.OR, 0);
};

AdditiveoperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterAdditiveoperator(this);
	}
};

AdditiveoperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitAdditiveoperator(this);
	}
};




PascalGrammarParser.AdditiveoperatorContext = AdditiveoperatorContext;

PascalGrammarParser.prototype.additiveoperator = function() {

    var localctx = new AdditiveoperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, PascalGrammarParser.RULE_additiveoperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 639;
        _la = this._input.LA(1);
        if(!(((((_la - 26)) & ~0x1f) == 0 && ((1 << (_la - 26)) & ((1 << (PascalGrammarParser.OR - 26)) | (1 << (PascalGrammarParser.PLUS - 26)) | (1 << (PascalGrammarParser.MINUS - 26)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_term;
    return this;
}

TermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TermContext.prototype.constructor = TermContext;

TermContext.prototype.signedFactor = function() {
    return this.getTypedRuleContext(SignedFactorContext,0);
};

TermContext.prototype.multiplicativeoperator = function() {
    return this.getTypedRuleContext(MultiplicativeoperatorContext,0);
};

TermContext.prototype.term = function() {
    return this.getTypedRuleContext(TermContext,0);
};

TermContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterTerm(this);
	}
};

TermContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitTerm(this);
	}
};




PascalGrammarParser.TermContext = TermContext;

PascalGrammarParser.prototype.term = function() {

    var localctx = new TermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, PascalGrammarParser.RULE_term);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 641;
        this.signedFactor();
        this.state = 645;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PascalGrammarParser.AND) | (1 << PascalGrammarParser.DIV) | (1 << PascalGrammarParser.MOD))) !== 0) || _la===PascalGrammarParser.STAR || _la===PascalGrammarParser.SLASH) {
            this.state = 642;
            this.multiplicativeoperator();
            this.state = 643;
            this.term();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MultiplicativeoperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_multiplicativeoperator;
    return this;
}

MultiplicativeoperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplicativeoperatorContext.prototype.constructor = MultiplicativeoperatorContext;

MultiplicativeoperatorContext.prototype.STAR = function() {
    return this.getToken(PascalGrammarParser.STAR, 0);
};

MultiplicativeoperatorContext.prototype.SLASH = function() {
    return this.getToken(PascalGrammarParser.SLASH, 0);
};

MultiplicativeoperatorContext.prototype.DIV = function() {
    return this.getToken(PascalGrammarParser.DIV, 0);
};

MultiplicativeoperatorContext.prototype.MOD = function() {
    return this.getToken(PascalGrammarParser.MOD, 0);
};

MultiplicativeoperatorContext.prototype.AND = function() {
    return this.getToken(PascalGrammarParser.AND, 0);
};

MultiplicativeoperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterMultiplicativeoperator(this);
	}
};

MultiplicativeoperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitMultiplicativeoperator(this);
	}
};




PascalGrammarParser.MultiplicativeoperatorContext = MultiplicativeoperatorContext;

PascalGrammarParser.prototype.multiplicativeoperator = function() {

    var localctx = new MultiplicativeoperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, PascalGrammarParser.RULE_multiplicativeoperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 647;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PascalGrammarParser.AND) | (1 << PascalGrammarParser.DIV) | (1 << PascalGrammarParser.MOD))) !== 0) || _la===PascalGrammarParser.STAR || _la===PascalGrammarParser.SLASH)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SignedFactorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_signedFactor;
    return this;
}

SignedFactorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignedFactorContext.prototype.constructor = SignedFactorContext;

SignedFactorContext.prototype.factor = function() {
    return this.getTypedRuleContext(FactorContext,0);
};

SignedFactorContext.prototype.PLUS = function() {
    return this.getToken(PascalGrammarParser.PLUS, 0);
};

SignedFactorContext.prototype.MINUS = function() {
    return this.getToken(PascalGrammarParser.MINUS, 0);
};

SignedFactorContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterSignedFactor(this);
	}
};

SignedFactorContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitSignedFactor(this);
	}
};




PascalGrammarParser.SignedFactorContext = SignedFactorContext;

PascalGrammarParser.prototype.signedFactor = function() {

    var localctx = new SignedFactorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, PascalGrammarParser.RULE_signedFactor);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 650;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PascalGrammarParser.PLUS || _la===PascalGrammarParser.MINUS) {
            this.state = 649;
            _la = this._input.LA(1);
            if(!(_la===PascalGrammarParser.PLUS || _la===PascalGrammarParser.MINUS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 652;
        this.factor();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FactorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_factor;
    return this;
}

FactorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FactorContext.prototype.constructor = FactorContext;

FactorContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

FactorContext.prototype.LPAREN = function() {
    return this.getToken(PascalGrammarParser.LPAREN, 0);
};

FactorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FactorContext.prototype.RPAREN = function() {
    return this.getToken(PascalGrammarParser.RPAREN, 0);
};

FactorContext.prototype.functionDesignator = function() {
    return this.getTypedRuleContext(FunctionDesignatorContext,0);
};

FactorContext.prototype.unsignedConstant = function() {
    return this.getTypedRuleContext(UnsignedConstantContext,0);
};

FactorContext.prototype.set = function() {
    return this.getTypedRuleContext(SetContext,0);
};

FactorContext.prototype.NOT = function() {
    return this.getToken(PascalGrammarParser.NOT, 0);
};

FactorContext.prototype.factor = function() {
    return this.getTypedRuleContext(FactorContext,0);
};

FactorContext.prototype.bool = function() {
    return this.getTypedRuleContext(BoolContext,0);
};

FactorContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterFactor(this);
	}
};

FactorContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitFactor(this);
	}
};




PascalGrammarParser.FactorContext = FactorContext;

PascalGrammarParser.prototype.factor = function() {

    var localctx = new FactorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, PascalGrammarParser.RULE_factor);
    try {
        this.state = 665;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 654;
            this.variable();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 655;
            this.match(PascalGrammarParser.LPAREN);
            this.state = 656;
            this.expression();
            this.state = 657;
            this.match(PascalGrammarParser.RPAREN);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 659;
            this.functionDesignator();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 660;
            this.unsignedConstant();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 661;
            this.set();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 662;
            this.match(PascalGrammarParser.NOT);
            this.state = 663;
            this.factor();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 664;
            this.bool();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnsignedConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_unsignedConstant;
    return this;
}

UnsignedConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnsignedConstantContext.prototype.constructor = UnsignedConstantContext;

UnsignedConstantContext.prototype.unsignedNumber = function() {
    return this.getTypedRuleContext(UnsignedNumberContext,0);
};

UnsignedConstantContext.prototype.constantChr = function() {
    return this.getTypedRuleContext(ConstantChrContext,0);
};

UnsignedConstantContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

UnsignedConstantContext.prototype.NIL = function() {
    return this.getToken(PascalGrammarParser.NIL, 0);
};

UnsignedConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterUnsignedConstant(this);
	}
};

UnsignedConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitUnsignedConstant(this);
	}
};




PascalGrammarParser.UnsignedConstantContext = UnsignedConstantContext;

PascalGrammarParser.prototype.unsignedConstant = function() {

    var localctx = new UnsignedConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, PascalGrammarParser.RULE_unsignedConstant);
    try {
        this.state = 671;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PascalGrammarParser.NUM_INT:
        case PascalGrammarParser.NUM_REAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 667;
            this.unsignedNumber();
            break;
        case PascalGrammarParser.CHR:
            this.enterOuterAlt(localctx, 2);
            this.state = 668;
            this.constantChr();
            break;
        case PascalGrammarParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 669;
            this.string();
            break;
        case PascalGrammarParser.NIL:
            this.enterOuterAlt(localctx, 4);
            this.state = 670;
            this.match(PascalGrammarParser.NIL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionDesignatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_functionDesignator;
    return this;
}

FunctionDesignatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDesignatorContext.prototype.constructor = FunctionDesignatorContext;

FunctionDesignatorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FunctionDesignatorContext.prototype.LPAREN = function() {
    return this.getToken(PascalGrammarParser.LPAREN, 0);
};

FunctionDesignatorContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

FunctionDesignatorContext.prototype.RPAREN = function() {
    return this.getToken(PascalGrammarParser.RPAREN, 0);
};

FunctionDesignatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterFunctionDesignator(this);
	}
};

FunctionDesignatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitFunctionDesignator(this);
	}
};




PascalGrammarParser.FunctionDesignatorContext = FunctionDesignatorContext;

PascalGrammarParser.prototype.functionDesignator = function() {

    var localctx = new FunctionDesignatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, PascalGrammarParser.RULE_functionDesignator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 673;
        this.identifier();
        this.state = 674;
        this.match(PascalGrammarParser.LPAREN);
        this.state = 675;
        this.parameterList();
        this.state = 676;
        this.match(PascalGrammarParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_parameterList;
    return this;
}

ParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterListContext.prototype.constructor = ParameterListContext;

ParameterListContext.prototype.actualParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ActualParameterContext);
    } else {
        return this.getTypedRuleContext(ActualParameterContext,i);
    }
};

ParameterListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.COMMA);
    } else {
        return this.getToken(PascalGrammarParser.COMMA, i);
    }
};


ParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterParameterList(this);
	}
};

ParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitParameterList(this);
	}
};




PascalGrammarParser.ParameterListContext = ParameterListContext;

PascalGrammarParser.prototype.parameterList = function() {

    var localctx = new ParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, PascalGrammarParser.RULE_parameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 678;
        this.actualParameter();
        this.state = 683;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PascalGrammarParser.COMMA) {
            this.state = 679;
            this.match(PascalGrammarParser.COMMA);
            this.state = 680;
            this.actualParameter();
            this.state = 685;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_set;
    return this;
}

SetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetContext.prototype.constructor = SetContext;

SetContext.prototype.LBRACK = function() {
    return this.getToken(PascalGrammarParser.LBRACK, 0);
};

SetContext.prototype.elementList = function() {
    return this.getTypedRuleContext(ElementListContext,0);
};

SetContext.prototype.RBRACK = function() {
    return this.getToken(PascalGrammarParser.RBRACK, 0);
};

SetContext.prototype.LBRACK2 = function() {
    return this.getToken(PascalGrammarParser.LBRACK2, 0);
};

SetContext.prototype.RBRACK2 = function() {
    return this.getToken(PascalGrammarParser.RBRACK2, 0);
};

SetContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterSet(this);
	}
};

SetContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitSet(this);
	}
};




PascalGrammarParser.SetContext = SetContext;

PascalGrammarParser.prototype.set = function() {

    var localctx = new SetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, PascalGrammarParser.RULE_set);
    try {
        this.state = 694;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PascalGrammarParser.LBRACK:
            this.enterOuterAlt(localctx, 1);
            this.state = 686;
            this.match(PascalGrammarParser.LBRACK);
            this.state = 687;
            this.elementList();
            this.state = 688;
            this.match(PascalGrammarParser.RBRACK);
            break;
        case PascalGrammarParser.LBRACK2:
            this.enterOuterAlt(localctx, 2);
            this.state = 690;
            this.match(PascalGrammarParser.LBRACK2);
            this.state = 691;
            this.elementList();
            this.state = 692;
            this.match(PascalGrammarParser.RBRACK2);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_elementList;
    return this;
}

ElementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementListContext.prototype.constructor = ElementListContext;

ElementListContext.prototype.element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementContext);
    } else {
        return this.getTypedRuleContext(ElementContext,i);
    }
};

ElementListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.COMMA);
    } else {
        return this.getToken(PascalGrammarParser.COMMA, i);
    }
};


ElementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterElementList(this);
	}
};

ElementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitElementList(this);
	}
};




PascalGrammarParser.ElementListContext = ElementListContext;

PascalGrammarParser.prototype.elementList = function() {

    var localctx = new ElementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, PascalGrammarParser.RULE_elementList);
    var _la = 0; // Token type
    try {
        this.state = 705;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PascalGrammarParser.CHR:
        case PascalGrammarParser.NIL:
        case PascalGrammarParser.NOT:
        case PascalGrammarParser.PLUS:
        case PascalGrammarParser.MINUS:
        case PascalGrammarParser.LPAREN:
        case PascalGrammarParser.LBRACK:
        case PascalGrammarParser.LBRACK2:
        case PascalGrammarParser.AT:
        case PascalGrammarParser.TRUE:
        case PascalGrammarParser.FALSE:
        case PascalGrammarParser.IDENT:
        case PascalGrammarParser.STRING_LITERAL:
        case PascalGrammarParser.NUM_INT:
        case PascalGrammarParser.NUM_REAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 696;
            this.element();
            this.state = 701;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PascalGrammarParser.COMMA) {
                this.state = 697;
                this.match(PascalGrammarParser.COMMA);
                this.state = 698;
                this.element();
                this.state = 703;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case PascalGrammarParser.RBRACK:
        case PascalGrammarParser.RBRACK2:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_element;
    return this;
}

ElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementContext.prototype.constructor = ElementContext;

ElementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ElementContext.prototype.DOTDOT = function() {
    return this.getToken(PascalGrammarParser.DOTDOT, 0);
};

ElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterElement(this);
	}
};

ElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitElement(this);
	}
};




PascalGrammarParser.ElementContext = ElementContext;

PascalGrammarParser.prototype.element = function() {

    var localctx = new ElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, PascalGrammarParser.RULE_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 707;
        this.expression();
        this.state = 710;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PascalGrammarParser.DOTDOT) {
            this.state = 708;
            this.match(PascalGrammarParser.DOTDOT);
            this.state = 709;
            this.expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProcedureStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_procedureStatement;
    return this;
}

ProcedureStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureStatementContext.prototype.constructor = ProcedureStatementContext;

ProcedureStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ProcedureStatementContext.prototype.LPAREN = function() {
    return this.getToken(PascalGrammarParser.LPAREN, 0);
};

ProcedureStatementContext.prototype.RPAREN = function() {
    return this.getToken(PascalGrammarParser.RPAREN, 0);
};

ProcedureStatementContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

ProcedureStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterProcedureStatement(this);
	}
};

ProcedureStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitProcedureStatement(this);
	}
};




PascalGrammarParser.ProcedureStatementContext = ProcedureStatementContext;

PascalGrammarParser.prototype.procedureStatement = function() {

    var localctx = new ProcedureStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, PascalGrammarParser.RULE_procedureStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 712;
        this.identifier();
        this.state = 718;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PascalGrammarParser.LPAREN) {
            this.state = 713;
            this.match(PascalGrammarParser.LPAREN);
            this.state = 715;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PascalGrammarParser.CHR) | (1 << PascalGrammarParser.NIL) | (1 << PascalGrammarParser.NOT))) !== 0) || ((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (PascalGrammarParser.PLUS - 41)) | (1 << (PascalGrammarParser.MINUS - 41)) | (1 << (PascalGrammarParser.LPAREN - 41)) | (1 << (PascalGrammarParser.LBRACK - 41)) | (1 << (PascalGrammarParser.LBRACK2 - 41)) | (1 << (PascalGrammarParser.AT - 41)) | (1 << (PascalGrammarParser.TRUE - 41)))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (PascalGrammarParser.FALSE - 73)) | (1 << (PascalGrammarParser.IDENT - 73)) | (1 << (PascalGrammarParser.STRING_LITERAL - 73)) | (1 << (PascalGrammarParser.NUM_INT - 73)) | (1 << (PascalGrammarParser.NUM_REAL - 73)))) !== 0)) {
                this.state = 714;
                this.parameterList();
            }

            this.state = 717;
            this.match(PascalGrammarParser.RPAREN);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ActualParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_actualParameter;
    return this;
}

ActualParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActualParameterContext.prototype.constructor = ActualParameterContext;

ActualParameterContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ActualParameterContext.prototype.parameterwidth = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterwidthContext);
    } else {
        return this.getTypedRuleContext(ParameterwidthContext,i);
    }
};

ActualParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterActualParameter(this);
	}
};

ActualParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitActualParameter(this);
	}
};




PascalGrammarParser.ActualParameterContext = ActualParameterContext;

PascalGrammarParser.prototype.actualParameter = function() {

    var localctx = new ActualParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, PascalGrammarParser.RULE_actualParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 720;
        this.expression();
        this.state = 724;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PascalGrammarParser.COLON) {
            this.state = 721;
            this.parameterwidth();
            this.state = 726;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterwidthContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_parameterwidth;
    return this;
}

ParameterwidthContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterwidthContext.prototype.constructor = ParameterwidthContext;

ParameterwidthContext.prototype.COLON = function() {
    return this.getToken(PascalGrammarParser.COLON, 0);
};

ParameterwidthContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ParameterwidthContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterParameterwidth(this);
	}
};

ParameterwidthContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitParameterwidth(this);
	}
};




PascalGrammarParser.ParameterwidthContext = ParameterwidthContext;

PascalGrammarParser.prototype.parameterwidth = function() {

    var localctx = new ParameterwidthContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, PascalGrammarParser.RULE_parameterwidth);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 727;
        this.match(PascalGrammarParser.COLON);
        this.state = 728;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GotoStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_gotoStatement;
    return this;
}

GotoStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GotoStatementContext.prototype.constructor = GotoStatementContext;

GotoStatementContext.prototype.GOTO = function() {
    return this.getToken(PascalGrammarParser.GOTO, 0);
};

GotoStatementContext.prototype.label = function() {
    return this.getTypedRuleContext(LabelContext,0);
};

GotoStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterGotoStatement(this);
	}
};

GotoStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitGotoStatement(this);
	}
};




PascalGrammarParser.GotoStatementContext = GotoStatementContext;

PascalGrammarParser.prototype.gotoStatement = function() {

    var localctx = new GotoStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, PascalGrammarParser.RULE_gotoStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 730;
        this.match(PascalGrammarParser.GOTO);
        this.state = 731;
        this.label();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EmptyStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_emptyStatement;
    return this;
}

EmptyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyStatementContext.prototype.constructor = EmptyStatementContext;


EmptyStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterEmptyStatement(this);
	}
};

EmptyStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitEmptyStatement(this);
	}
};




PascalGrammarParser.EmptyStatementContext = EmptyStatementContext;

PascalGrammarParser.prototype.emptyStatement = function() {

    var localctx = new EmptyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, PascalGrammarParser.RULE_emptyStatement);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EmptyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_empty;
    return this;
}

EmptyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyContext.prototype.constructor = EmptyContext;


EmptyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterEmpty(this);
	}
};

EmptyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitEmpty(this);
	}
};




PascalGrammarParser.EmptyContext = EmptyContext;

PascalGrammarParser.prototype.empty = function() {

    var localctx = new EmptyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, PascalGrammarParser.RULE_empty);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StructuredStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_structuredStatement;
    return this;
}

StructuredStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructuredStatementContext.prototype.constructor = StructuredStatementContext;

StructuredStatementContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

StructuredStatementContext.prototype.conditionalStatement = function() {
    return this.getTypedRuleContext(ConditionalStatementContext,0);
};

StructuredStatementContext.prototype.repetetiveStatement = function() {
    return this.getTypedRuleContext(RepetetiveStatementContext,0);
};

StructuredStatementContext.prototype.withStatement = function() {
    return this.getTypedRuleContext(WithStatementContext,0);
};

StructuredStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterStructuredStatement(this);
	}
};

StructuredStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitStructuredStatement(this);
	}
};




PascalGrammarParser.StructuredStatementContext = StructuredStatementContext;

PascalGrammarParser.prototype.structuredStatement = function() {

    var localctx = new StructuredStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, PascalGrammarParser.RULE_structuredStatement);
    try {
        this.state = 741;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PascalGrammarParser.BEGIN:
            this.enterOuterAlt(localctx, 1);
            this.state = 737;
            this.compoundStatement();
            break;
        case PascalGrammarParser.CASE:
        case PascalGrammarParser.IF:
            this.enterOuterAlt(localctx, 2);
            this.state = 738;
            this.conditionalStatement();
            break;
        case PascalGrammarParser.FOR:
        case PascalGrammarParser.REPEAT:
        case PascalGrammarParser.WHILE:
            this.enterOuterAlt(localctx, 3);
            this.state = 739;
            this.repetetiveStatement();
            break;
        case PascalGrammarParser.WITH:
            this.enterOuterAlt(localctx, 4);
            this.state = 740;
            this.withStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CompoundStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_compoundStatement;
    return this;
}

CompoundStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompoundStatementContext.prototype.constructor = CompoundStatementContext;

CompoundStatementContext.prototype.BEGIN = function() {
    return this.getToken(PascalGrammarParser.BEGIN, 0);
};

CompoundStatementContext.prototype.statements = function() {
    return this.getTypedRuleContext(StatementsContext,0);
};

CompoundStatementContext.prototype.END = function() {
    return this.getToken(PascalGrammarParser.END, 0);
};

CompoundStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterCompoundStatement(this);
	}
};

CompoundStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitCompoundStatement(this);
	}
};




PascalGrammarParser.CompoundStatementContext = CompoundStatementContext;

PascalGrammarParser.prototype.compoundStatement = function() {

    var localctx = new CompoundStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, PascalGrammarParser.RULE_compoundStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 743;
        this.match(PascalGrammarParser.BEGIN);
        this.state = 744;
        this.statements();
        this.state = 745;
        this.match(PascalGrammarParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_statements;
    return this;
}

StatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementsContext.prototype.constructor = StatementsContext;

StatementsContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

StatementsContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.SEMI);
    } else {
        return this.getToken(PascalGrammarParser.SEMI, i);
    }
};


StatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterStatements(this);
	}
};

StatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitStatements(this);
	}
};




PascalGrammarParser.StatementsContext = StatementsContext;

PascalGrammarParser.prototype.statements = function() {

    var localctx = new StatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, PascalGrammarParser.RULE_statements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 747;
        this.statement();
        this.state = 752;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PascalGrammarParser.SEMI) {
            this.state = 748;
            this.match(PascalGrammarParser.SEMI);
            this.state = 749;
            this.statement();
            this.state = 754;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConditionalStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_conditionalStatement;
    return this;
}

ConditionalStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalStatementContext.prototype.constructor = ConditionalStatementContext;

ConditionalStatementContext.prototype.ifStatement = function() {
    return this.getTypedRuleContext(IfStatementContext,0);
};

ConditionalStatementContext.prototype.caseStatement = function() {
    return this.getTypedRuleContext(CaseStatementContext,0);
};

ConditionalStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterConditionalStatement(this);
	}
};

ConditionalStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitConditionalStatement(this);
	}
};




PascalGrammarParser.ConditionalStatementContext = ConditionalStatementContext;

PascalGrammarParser.prototype.conditionalStatement = function() {

    var localctx = new ConditionalStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, PascalGrammarParser.RULE_conditionalStatement);
    try {
        this.state = 757;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PascalGrammarParser.IF:
            this.enterOuterAlt(localctx, 1);
            this.state = 755;
            this.ifStatement();
            break;
        case PascalGrammarParser.CASE:
            this.enterOuterAlt(localctx, 2);
            this.state = 756;
            this.caseStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_ifStatement;
    return this;
}

IfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.IF = function() {
    return this.getToken(PascalGrammarParser.IF, 0);
};

IfStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfStatementContext.prototype.THEN = function() {
    return this.getToken(PascalGrammarParser.THEN, 0);
};

IfStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

IfStatementContext.prototype.ELSE = function() {
    return this.getToken(PascalGrammarParser.ELSE, 0);
};

IfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterIfStatement(this);
	}
};

IfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitIfStatement(this);
	}
};




PascalGrammarParser.IfStatementContext = IfStatementContext;

PascalGrammarParser.prototype.ifStatement = function() {

    var localctx = new IfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, PascalGrammarParser.RULE_ifStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 759;
        this.match(PascalGrammarParser.IF);
        this.state = 760;
        this.expression();
        this.state = 761;
        this.match(PascalGrammarParser.THEN);
        this.state = 762;
        this.statement();
        this.state = 765;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        if(la_===1) {
            this.state = 763;
            this.match(PascalGrammarParser.ELSE);
            this.state = 764;
            this.statement();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CaseStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_caseStatement;
    return this;
}

CaseStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseStatementContext.prototype.constructor = CaseStatementContext;

CaseStatementContext.prototype.CASE = function() {
    return this.getToken(PascalGrammarParser.CASE, 0);
};

CaseStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CaseStatementContext.prototype.OF = function() {
    return this.getToken(PascalGrammarParser.OF, 0);
};

CaseStatementContext.prototype.caseListElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CaseListElementContext);
    } else {
        return this.getTypedRuleContext(CaseListElementContext,i);
    }
};

CaseStatementContext.prototype.END = function() {
    return this.getToken(PascalGrammarParser.END, 0);
};

CaseStatementContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.SEMI);
    } else {
        return this.getToken(PascalGrammarParser.SEMI, i);
    }
};


CaseStatementContext.prototype.ELSE = function() {
    return this.getToken(PascalGrammarParser.ELSE, 0);
};

CaseStatementContext.prototype.statements = function() {
    return this.getTypedRuleContext(StatementsContext,0);
};

CaseStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterCaseStatement(this);
	}
};

CaseStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitCaseStatement(this);
	}
};




PascalGrammarParser.CaseStatementContext = CaseStatementContext;

PascalGrammarParser.prototype.caseStatement = function() {

    var localctx = new CaseStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, PascalGrammarParser.RULE_caseStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 767;
        this.match(PascalGrammarParser.CASE);
        this.state = 768;
        this.expression();
        this.state = 769;
        this.match(PascalGrammarParser.OF);
        this.state = 770;
        this.caseListElement();
        this.state = 775;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,69,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 771;
                this.match(PascalGrammarParser.SEMI);
                this.state = 772;
                this.caseListElement();
            }
            this.state = 777;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,69,this._ctx);
        }

        this.state = 781;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PascalGrammarParser.SEMI) {
            this.state = 778;
            this.match(PascalGrammarParser.SEMI);
            this.state = 779;
            this.match(PascalGrammarParser.ELSE);
            this.state = 780;
            this.statements();
        }

        this.state = 783;
        this.match(PascalGrammarParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CaseListElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_caseListElement;
    return this;
}

CaseListElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseListElementContext.prototype.constructor = CaseListElementContext;

CaseListElementContext.prototype.constList = function() {
    return this.getTypedRuleContext(ConstListContext,0);
};

CaseListElementContext.prototype.COLON = function() {
    return this.getToken(PascalGrammarParser.COLON, 0);
};

CaseListElementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

CaseListElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterCaseListElement(this);
	}
};

CaseListElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitCaseListElement(this);
	}
};




PascalGrammarParser.CaseListElementContext = CaseListElementContext;

PascalGrammarParser.prototype.caseListElement = function() {

    var localctx = new CaseListElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, PascalGrammarParser.RULE_caseListElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 785;
        this.constList();
        this.state = 786;
        this.match(PascalGrammarParser.COLON);
        this.state = 787;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RepetetiveStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_repetetiveStatement;
    return this;
}

RepetetiveStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RepetetiveStatementContext.prototype.constructor = RepetetiveStatementContext;

RepetetiveStatementContext.prototype.whileStatement = function() {
    return this.getTypedRuleContext(WhileStatementContext,0);
};

RepetetiveStatementContext.prototype.repeatStatement = function() {
    return this.getTypedRuleContext(RepeatStatementContext,0);
};

RepetetiveStatementContext.prototype.forStatement = function() {
    return this.getTypedRuleContext(ForStatementContext,0);
};

RepetetiveStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterRepetetiveStatement(this);
	}
};

RepetetiveStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitRepetetiveStatement(this);
	}
};




PascalGrammarParser.RepetetiveStatementContext = RepetetiveStatementContext;

PascalGrammarParser.prototype.repetetiveStatement = function() {

    var localctx = new RepetetiveStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, PascalGrammarParser.RULE_repetetiveStatement);
    try {
        this.state = 792;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PascalGrammarParser.WHILE:
            this.enterOuterAlt(localctx, 1);
            this.state = 789;
            this.whileStatement();
            break;
        case PascalGrammarParser.REPEAT:
            this.enterOuterAlt(localctx, 2);
            this.state = 790;
            this.repeatStatement();
            break;
        case PascalGrammarParser.FOR:
            this.enterOuterAlt(localctx, 3);
            this.state = 791;
            this.forStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhileStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_whileStatement;
    return this;
}

WhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

WhileStatementContext.prototype.WHILE = function() {
    return this.getToken(PascalGrammarParser.WHILE, 0);
};

WhileStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhileStatementContext.prototype.DO = function() {
    return this.getToken(PascalGrammarParser.DO, 0);
};

WhileStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

WhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterWhileStatement(this);
	}
};

WhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitWhileStatement(this);
	}
};




PascalGrammarParser.WhileStatementContext = WhileStatementContext;

PascalGrammarParser.prototype.whileStatement = function() {

    var localctx = new WhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, PascalGrammarParser.RULE_whileStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 794;
        this.match(PascalGrammarParser.WHILE);
        this.state = 795;
        this.expression();
        this.state = 796;
        this.match(PascalGrammarParser.DO);
        this.state = 797;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RepeatStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_repeatStatement;
    return this;
}

RepeatStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RepeatStatementContext.prototype.constructor = RepeatStatementContext;

RepeatStatementContext.prototype.REPEAT = function() {
    return this.getToken(PascalGrammarParser.REPEAT, 0);
};

RepeatStatementContext.prototype.statements = function() {
    return this.getTypedRuleContext(StatementsContext,0);
};

RepeatStatementContext.prototype.UNTIL = function() {
    return this.getToken(PascalGrammarParser.UNTIL, 0);
};

RepeatStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

RepeatStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterRepeatStatement(this);
	}
};

RepeatStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitRepeatStatement(this);
	}
};




PascalGrammarParser.RepeatStatementContext = RepeatStatementContext;

PascalGrammarParser.prototype.repeatStatement = function() {

    var localctx = new RepeatStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, PascalGrammarParser.RULE_repeatStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 799;
        this.match(PascalGrammarParser.REPEAT);
        this.state = 800;
        this.statements();
        this.state = 801;
        this.match(PascalGrammarParser.UNTIL);
        this.state = 802;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_forStatement;
    return this;
}

ForStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForStatementContext.prototype.constructor = ForStatementContext;

ForStatementContext.prototype.FOR = function() {
    return this.getToken(PascalGrammarParser.FOR, 0);
};

ForStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ForStatementContext.prototype.ASSIGN = function() {
    return this.getToken(PascalGrammarParser.ASSIGN, 0);
};

ForStatementContext.prototype.forList = function() {
    return this.getTypedRuleContext(ForListContext,0);
};

ForStatementContext.prototype.DO = function() {
    return this.getToken(PascalGrammarParser.DO, 0);
};

ForStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterForStatement(this);
	}
};

ForStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitForStatement(this);
	}
};




PascalGrammarParser.ForStatementContext = ForStatementContext;

PascalGrammarParser.prototype.forStatement = function() {

    var localctx = new ForStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, PascalGrammarParser.RULE_forStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 804;
        this.match(PascalGrammarParser.FOR);
        this.state = 805;
        this.identifier();
        this.state = 806;
        this.match(PascalGrammarParser.ASSIGN);
        this.state = 807;
        this.forList();
        this.state = 808;
        this.match(PascalGrammarParser.DO);
        this.state = 809;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_forList;
    return this;
}

ForListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForListContext.prototype.constructor = ForListContext;

ForListContext.prototype.initialValue = function() {
    return this.getTypedRuleContext(InitialValueContext,0);
};

ForListContext.prototype.finalValue = function() {
    return this.getTypedRuleContext(FinalValueContext,0);
};

ForListContext.prototype.TO = function() {
    return this.getToken(PascalGrammarParser.TO, 0);
};

ForListContext.prototype.DOWNTO = function() {
    return this.getToken(PascalGrammarParser.DOWNTO, 0);
};

ForListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterForList(this);
	}
};

ForListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitForList(this);
	}
};




PascalGrammarParser.ForListContext = ForListContext;

PascalGrammarParser.prototype.forList = function() {

    var localctx = new ForListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, PascalGrammarParser.RULE_forList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 811;
        this.initialValue();
        this.state = 812;
        _la = this._input.LA(1);
        if(!(_la===PascalGrammarParser.DOWNTO || _la===PascalGrammarParser.TO)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 813;
        this.finalValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InitialValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_initialValue;
    return this;
}

InitialValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitialValueContext.prototype.constructor = InitialValueContext;

InitialValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

InitialValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterInitialValue(this);
	}
};

InitialValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitInitialValue(this);
	}
};




PascalGrammarParser.InitialValueContext = InitialValueContext;

PascalGrammarParser.prototype.initialValue = function() {

    var localctx = new InitialValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, PascalGrammarParser.RULE_initialValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 815;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FinalValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_finalValue;
    return this;
}

FinalValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FinalValueContext.prototype.constructor = FinalValueContext;

FinalValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FinalValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterFinalValue(this);
	}
};

FinalValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitFinalValue(this);
	}
};




PascalGrammarParser.FinalValueContext = FinalValueContext;

PascalGrammarParser.prototype.finalValue = function() {

    var localctx = new FinalValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, PascalGrammarParser.RULE_finalValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 817;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WithStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_withStatement;
    return this;
}

WithStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithStatementContext.prototype.constructor = WithStatementContext;

WithStatementContext.prototype.WITH = function() {
    return this.getToken(PascalGrammarParser.WITH, 0);
};

WithStatementContext.prototype.recordVariableList = function() {
    return this.getTypedRuleContext(RecordVariableListContext,0);
};

WithStatementContext.prototype.DO = function() {
    return this.getToken(PascalGrammarParser.DO, 0);
};

WithStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

WithStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterWithStatement(this);
	}
};

WithStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitWithStatement(this);
	}
};




PascalGrammarParser.WithStatementContext = WithStatementContext;

PascalGrammarParser.prototype.withStatement = function() {

    var localctx = new WithStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, PascalGrammarParser.RULE_withStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 819;
        this.match(PascalGrammarParser.WITH);
        this.state = 820;
        this.recordVariableList();
        this.state = 821;
        this.match(PascalGrammarParser.DO);
        this.state = 822;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RecordVariableListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PascalGrammarParser.RULE_recordVariableList;
    return this;
}

RecordVariableListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RecordVariableListContext.prototype.constructor = RecordVariableListContext;

RecordVariableListContext.prototype.variable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableContext);
    } else {
        return this.getTypedRuleContext(VariableContext,i);
    }
};

RecordVariableListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PascalGrammarParser.COMMA);
    } else {
        return this.getToken(PascalGrammarParser.COMMA, i);
    }
};


RecordVariableListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.enterRecordVariableList(this);
	}
};

RecordVariableListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PascalGrammarListener ) {
        listener.exitRecordVariableList(this);
	}
};




PascalGrammarParser.RecordVariableListContext = RecordVariableListContext;

PascalGrammarParser.prototype.recordVariableList = function() {

    var localctx = new RecordVariableListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, PascalGrammarParser.RULE_recordVariableList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 824;
        this.variable();
        this.state = 829;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PascalGrammarParser.COMMA) {
            this.state = 825;
            this.match(PascalGrammarParser.COMMA);
            this.state = 826;
            this.variable();
            this.state = 831;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.PascalGrammarParser = PascalGrammarParser;
